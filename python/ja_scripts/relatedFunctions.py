import numpy as np
import matplotlib.pyplot as plt
import math

#### Calculates CRI (Color Rendering Index)
def  getcri(inlight, ref):
    CMF =  np.array([[380,0.001368,0.000039,0.006450],
            [385,0.002236,0.000064,0.010550],
            [390,0.004243,0.000120,0.020050],
            [395,0.007650,0.000217,0.036210],
            [400,0.014310,0.000396,0.067850],
            [405,0.023190,0.000640,0.110200],
            [410,0.043510,0.001210,0.207400],
            [415,0.077630,0.002180,0.371300],
            [420,0.134380,0.004000,0.645600],
            [425,0.214770,0.007300,1.039050],
            [430,0.283900,0.011600,1.385600],
            [435,0.328500,0.016840,1.622960],
            [440,0.348280,0.023000,1.747060],
            [445,0.348060,0.029800,1.782600],
            [450,0.336200,0.038000,1.772110],
            [455,0.318700,0.048000,1.744100],
            [460,0.290800,0.060000,1.669200],
            [465,0.251100,0.073900,1.528100],
            [470,0.195360,0.090980,1.287640],
            [475,0.142100,0.112600,1.041900],
            [480,0.095640,0.139020,0.812950],
            [485,0.057950,0.169300,0.616200],
            [490,0.032010,0.208020,0.465180],
            [495,0.014700,0.258600,0.353300],
            [500,0.004900,0.323000,0.272000],
            [505,0.002400,0.407300,0.212300],
            [510,0.009300,0.503000,0.158200],
            [515,0.029100,0.608200,0.111700],
            [520,0.063270,0.710000,0.078250],
            [525,0.109600,0.793200,0.057250],
            [530,0.165500,0.862000,0.042160],
            [535,0.225750,0.914850,0.029840],
            [540,0.290400,0.954000,0.020300],
            [545,0.359700,0.980300,0.013400],
            [550,0.433450,0.994950,0.008750],
            [555,0.512050,1.000000,0.005750],
            [560,0.594500,0.995000,0.003900],
            [565,0.678400,0.978600,0.002750],
            [570,0.762100,0.952000,0.002100],
            [575,0.842500,0.915400,0.001800],
            [580,0.916300,0.870000,0.001650],
            [585,0.978600,0.816300,0.001400],
            [590,1.026300,0.757000,0.001100],
            [595,1.056700,0.694900,0.001000],
            [600,1.062200,0.631000,0.000800],
            [605,1.045600,0.566800,0.000600],
            [610,1.002600,0.503000,0.000340],
            [615,0.938400,0.441200,0.000240],
            [620,0.854450,0.381000,0.000190],
            [625,0.751400,0.321000,0.000100],
            [630,0.642400,0.265000,0.000050],
            [635,0.541900,0.217000,0.000030],
            [640,0.447900,0.175000,0.000020],
            [645,0.360800,0.138200,0.000010],
            [650,0.283500,0.107000,0.000000],
            [655,0.218700,0.081600,0.000000],
            [660,0.164900,0.061000,0.000000],
            [665,0.121200,0.044580,0.000000],
            [670,0.087400,0.032000,0.000000],
            [675,0.063600,0.023200,0.000000],
            [680,0.046770,0.017000,0.000000],
            [685,0.032900,0.011920,0.000000],
            [690,0.022700,0.008210,0.000000],
            [695,0.015840,0.005723,0.000000],
            [700,0.011359,0.004102,0.000000],
            [705,0.008111,0.002929,0.000000],
            [710,0.005790,0.002091,0.000000],
            [715,0.004109,0.001484,0.000000],
            [720,0.002899,0.001047,0.000000],
            [725,0.002049,0.000740,0.000000],
            [730,0.001440,0.000520,0.000000],
            [735,0.001000,0.000361,0.000000],
            [740,0.000690,0.000249,0.000000],
            [745,0.000476,0.000172,0.000000],
            [750,0.000332,0.000120,0.000000],
            [755,0.000235,0.000085,0.000000],
            [760,0.000166,0.000060,0.000000],
            [765,0.000117,0.000042,0.000000],
            [770,0.000083,0.000030,0.000000],
            [775,0.000059,0.000021,0.000000],
            [780,0.000042,0.000015,0.000000]])
    
    CMF_1 = CMF[:,1]
    CMF_2 = CMF[:,2]
    CMF_3 = CMF[:,3]
    
    CMF_1 = np.expand_dims(CMF_1, axis=1)
    CMF_2 = np.expand_dims(CMF_2, axis=1)
    CMF_3 = np.expand_dims(CMF_3, axis=1)
    
    ## Munsell TC1-TC15 Test Color Sample
    TC = np.array([[380,0.219,0.07,0.065,0.074,0.295,0.151,0.378,0.104,0.066,0.05,0.111,0.12,0.104,0.036,0.131],
    [385,0.239,0.079,0.068,0.083,0.306,0.203,0.459,0.129,0.062,0.054,0.121,0.103,0.127,0.036,0.139],
    [390,0.252,0.089,0.07,0.093,0.31,0.265,0.524,0.17,0.058,0.059,0.127,0.09,0.161,0.037,0.147],
    [395,0.256,0.101,0.072,0.105,0.312,0.339,0.546,0.24,0.055,0.063,0.129,0.082,0.211,0.038,0.153],
    [400,0.256,0.111,0.073,0.116,0.313,0.41,0.551,0.319,0.052,0.066,0.127,0.076,0.264,0.039,0.158],
    [405,0.254,0.116,0.073,0.121,0.315,0.464,0.555,0.416,0.052,0.067,0.121,0.068,0.313,0.039,0.162],
    [410,0.252,0.118,0.074,0.124,0.319,0.492,0.559,0.462,0.051,0.068,0.116,0.064,0.341,0.04,0.164],
    [415,0.248,0.12,0.074,0.126,0.322,0.508,0.56,0.482,0.05,0.069,0.112,0.065,0.352,0.041,0.167],
    [420,0.244,0.121,0.074,0.128,0.326,0.517,0.561,0.49,0.05,0.069,0.108,0.075,0.359,0.042,0.17],
    [425,0.24,0.122,0.073,0.131,0.33,0.524,0.558,0.488,0.049,0.07,0.105,0.093,0.361,0.042,0.175],
    [430,0.237,0.122,0.073,0.135,0.334,0.531,0.556,0.482,0.048,0.072,0.104,0.123,0.364,0.043,0.182],
    [435,0.232,0.122,0.073,0.139,0.339,0.538,0.551,0.473,0.047,0.073,0.104,0.16,0.365,0.044,0.192],
    [440,0.23,0.123,0.073,0.144,0.346,0.544,0.544,0.462,0.046,0.076,0.105,0.207,0.367,0.044,0.203],
    [445,0.226,0.124,0.073,0.151,0.352,0.551,0.535,0.45,0.044,0.078,0.106,0.256,0.369,0.045,0.212],
    [450,0.225,0.127,0.074,0.161,0.36,0.556,0.522,0.439,0.042,0.083,0.11,0.3,0.372,0.045,0.221],
    [455,0.222,0.128,0.075,0.172,0.369,0.556,0.506,0.426,0.041,0.088,0.115,0.331,0.374,0.046,0.229],
    [460,0.22,0.131,0.077,0.186,0.381,0.554,0.488,0.413,0.038,0.095,0.123,0.346,0.376,0.047,0.236],
    [465,0.218,0.134,0.08,0.205,0.394,0.549,0.469,0.397,0.035,0.103,0.134,0.347,0.379,0.048,0.243],
    [470,0.216,0.138,0.085,0.229,0.403,0.541,0.448,0.382,0.033,0.113,0.148,0.341,0.384,0.05,0.249],
    [475,0.214,0.143,0.094,0.254,0.41,0.531,0.429,0.366,0.031,0.125,0.167,0.328,0.389,0.052,0.254],
    [480,0.214,0.15,0.109,0.281,0.415,0.519,0.408,0.352,0.03,0.142,0.192,0.307,0.397,0.055,0.259],
    [485,0.214,0.159,0.126,0.308,0.418,0.504,0.385,0.337,0.029,0.162,0.219,0.282,0.405,0.057,0.264],
    [490,0.216,0.174,0.148,0.332,0.419,0.488,0.363,0.325,0.028,0.189,0.252,0.257,0.416,0.062,0.269],
    [495,0.218,0.19,0.172,0.352,0.417,0.469,0.341,0.31,0.028,0.219,0.291,0.23,0.429,0.067,0.276],
    [500,0.223,0.207,0.198,0.37,0.413,0.45,0.324,0.299,0.028,0.262,0.325,0.204,0.443,0.075,0.284],
    [505,0.225,0.225,0.221,0.383,0.409,0.431,0.311,0.289,0.029,0.305,0.347,0.178,0.454,0.083,0.291],
    [510,0.226,0.242,0.241,0.39,0.403,0.414,0.301,0.283,0.03,0.365,0.356,0.154,0.461,0.092,0.296],
    [515,0.226,0.253,0.26,0.394,0.396,0.395,0.291,0.276,0.03,0.416,0.353,0.129,0.466,0.1,0.298],
    [520,0.225,0.26,0.278,0.395,0.389,0.377,0.283,0.27,0.031,0.465,0.346,0.109,0.469,0.108,0.296],
    [525,0.225,0.264,0.302,0.392,0.381,0.358,0.273,0.262,0.031,0.509,0.333,0.09,0.471,0.121,0.289],
    [530,0.227,0.267,0.339,0.385,0.372,0.341,0.265,0.256,0.032,0.546,0.314,0.075,0.474,0.133,0.282],
    [535,0.23,0.269,0.37,0.377,0.363,0.325,0.26,0.251,0.032,0.581,0.294,0.062,0.476,0.142,0.276],
    [540,0.236,0.272,0.392,0.367,0.353,0.309,0.257,0.25,0.033,0.61,0.271,0.051,0.483,0.15,0.274],
    [545,0.245,0.276,0.399,0.354,0.342,0.293,0.257,0.251,0.034,0.634,0.248,0.041,0.49,0.154,0.276],
    [550,0.253,0.282,0.4,0.341,0.331,0.279,0.259,0.254,0.035,0.653,0.227,0.035,0.506,0.155,0.281],
    [555,0.262,0.289,0.393,0.327,0.32,0.265,0.26,0.258,0.037,0.666,0.206,0.029,0.526,0.152,0.286],
    [560,0.272,0.299,0.38,0.312,0.308,0.253,0.26,0.264,0.041,0.678,0.188,0.025,0.553,0.147,0.291],
    [565,0.283,0.309,0.365,0.296,0.296,0.241,0.258,0.269,0.044,0.687,0.17,0.022,0.582,0.14,0.289],
    [570,0.298,0.322,0.349,0.28,0.284,0.234,0.256,0.272,0.048,0.693,0.153,0.019,0.618,0.133,0.286],
    [575,0.318,0.329,0.332,0.263,0.271,0.227,0.254,0.274,0.052,0.698,0.138,0.017,0.651,0.125,0.28],
    [580,0.341,0.335,0.315,0.247,0.26,0.225,0.254,0.278,0.06,0.701,0.125,0.017,0.68,0.118,0.285],
    [585,0.367,0.339,0.299,0.229,0.247,0.222,0.259,0.284,0.076,0.704,0.114,0.017,0.701,0.112,0.314],
    [590,0.39,0.341,0.285,0.214,0.232,0.221,0.27,0.295,0.102,0.705,0.106,0.016,0.717,0.106,0.354],
    [595,0.409,0.341,0.272,0.198,0.22,0.22,0.284,0.316,0.136,0.705,0.1,0.016,0.729,0.101,0.398],
    [600,0.424,0.342,0.264,0.185,0.21,0.22,0.302,0.348,0.19,0.706,0.096,0.016,0.736,0.098,0.44],
    [605,0.435,0.342,0.257,0.175,0.2,0.22,0.324,0.384,0.256,0.707,0.092,0.016,0.742,0.095,0.47],
    [610,0.442,0.342,0.252,0.169,0.194,0.22,0.344,0.434,0.336,0.707,0.09,0.016,0.745,0.093,0.494],
    [615,0.448,0.341,0.247,0.164,0.189,0.22,0.362,0.482,0.418,0.707,0.087,0.016,0.747,0.09,0.511],
    [620,0.45,0.341,0.241,0.16,0.185,0.223,0.377,0.528,0.505,0.708,0.085,0.016,0.748,0.089,0.524],
    [625,0.451,0.339,0.235,0.156,0.183,0.227,0.389,0.568,0.581,0.708,0.082,0.016,0.748,0.087,0.535],
    [630,0.451,0.339,0.229,0.154,0.18,0.233,0.4,0.604,0.641,0.71,0.08,0.018,0.748,0.086,0.544],
    [635,0.451,0.338,0.224,0.152,0.177,0.239,0.41,0.629,0.682,0.711,0.079,0.018,0.748,0.085,0.552],
    [640,0.451,0.338,0.22,0.151,0.176,0.244,0.42,0.648,0.717,0.712,0.078,0.018,0.748,0.084,0.559],
    [645,0.451,0.337,0.217,0.149,0.175,0.251,0.429,0.663,0.74,0.714,0.078,0.018,0.748,0.084,0.565],
    [650,0.45,0.336,0.216,0.148,0.175,0.258,0.438,0.676,0.758,0.716,0.078,0.019,0.748,0.084,0.571],
    [655,0.45,0.335,0.216,0.148,0.175,0.263,0.445,0.685,0.77,0.718,0.078,0.02,0.748,0.084,0.576],
    [660,0.451,0.334,0.219,0.148,0.175,0.268,0.452,0.693,0.781,0.72,0.081,0.023,0.747,0.085,0.581],
    [665,0.451,0.332,0.224,0.149,0.177,0.273,0.457,0.7,0.79,0.722,0.083,0.024,0.747,0.087,0.586],
    [670,0.453,0.332,0.23,0.151,0.18,0.278,0.462,0.705,0.797,0.725,0.088,0.026,0.747,0.092,0.59],
    [675,0.454,0.331,0.238,0.154,0.183,0.281,0.466,0.709,0.803,0.729,0.093,0.03,0.747,0.096,0.594],
    [680,0.455,0.331,0.251,0.158,0.186,0.283,0.468,0.712,0.809,0.731,0.102,0.035,0.747,0.102,0.599],
    [685,0.457,0.33,0.269,0.162,0.189,0.286,0.47,0.715,0.814,0.735,0.112,0.043,0.747,0.11,0.603],
    [690,0.458,0.329,0.288,0.165,0.192,0.291,0.473,0.717,0.819,0.739,0.125,0.056,0.747,0.123,0.606],
    [695,0.46,0.328,0.312,0.168,0.195,0.296,0.477,0.719,0.824,0.742,0.141,0.074,0.746,0.137,0.61],
    [700,0.462,0.328,0.34,0.17,0.199,0.302,0.483,0.721,0.828,0.746,0.161,0.097,0.746,0.152,0.612],
    [705,0.463,0.327,0.366,0.171,0.2,0.313,0.489,0.72,0.83,0.748,0.182,0.128,0.746,0.169,0.614],
    [710,0.464,0.326,0.39,0.17,0.199,0.325,0.496,0.719,0.831,0.749,0.203,0.166,0.745,0.188,0.616],
    [715,0.465,0.325,0.412,0.168,0.198,0.338,0.503,0.722,0.833,0.751,0.223,0.21,0.744,0.207,0.616],
    [720,0.466,0.324,0.431,0.166,0.196,0.351,0.511,0.725,0.835,0.753,0.242,0.257,0.743,0.226,0.616],
    [725,0.466,0.324,0.447,0.164,0.195,0.364,0.518,0.727,0.836,0.754,0.257,0.305,0.744,0.243,0.616],
    [730,0.466,0.324,0.46,0.164,0.195,0.376,0.525,0.729,0.836,0.755,0.27,0.354,0.745,0.26,0.615],
    [735,0.466,0.323,0.472,0.165,0.196,0.389,0.532,0.73,0.837,0.755,0.282,0.401,0.748,0.277,0.613],
    [740,0.467,0.322,0.481,0.168,0.197,0.401,0.539,0.73,0.838,0.755,0.292,0.446,0.75,0.294,0.612],
    [745,0.467,0.321,0.488,0.172,0.2,0.413,0.546,0.73,0.839,0.755,0.302,0.485,0.75,0.31,0.61],
    [750,0.467,0.32,0.493,0.177,0.203,0.425,0.553,0.73,0.839,0.756,0.31,0.52,0.749,0.325,0.609],
    [755,0.467,0.318,0.497,0.181,0.205,0.436,0.559,0.73,0.839,0.757,0.314,0.551,0.748,0.339,0.608],
    [760,0.467,0.316,0.5,0.185,0.208,0.447,0.565,0.73,0.839,0.758,0.317,0.577,0.748,0.353,0.607],
    [765,0.467,0.315,0.502,0.189,0.212,0.458,0.57,0.73,0.839,0.759,0.323,0.599,0.747,0.366,0.607],
    [770,0.467,0.315,0.505,0.192,0.215,0.469,0.575,0.73,0.839,0.759,0.33,0.618,0.747,0.379,0.609],
    [775,0.467,0.314,0.51,0.194,0.217,0.477,0.578,0.73,0.839,0.759,0.334,0.633,0.747,0.39,0.61],
    [780,0.467,0.314,0.516,0.197,0.219,0.485,0.581,0.73,0.839,0.759,0.338,0.645,0.747,0.399,0.611]])

    ##
    # Y-Normalising Light
    inlight = inlight.T
    denominator_temp = sum(np.multiply(inlight, CMF_2))
    denominator_temp = np.expand_dims(denominator_temp, axis = 0)
    testlight = inlight @ np.linalg.pinv(denominator_temp) *100
    # print('testlight:', testlight)
    ref = ref / np.sum(np.multiply(ref, CMF_2))*100
    # print('ref:', ref.flatten())

    # FOR DEBUGGING
    # plot(CMF(:,1), CMF(:,2), CMF(:,1), CMF(:,3), CMF(:,1), CMF(:,4))
    # legend('x', 'y', 'z')
    # figure
    # plot(CMF(:,1),  inlight@CMF(:,2), CMF(:,1),  inlight@CMF(:,3), CMF(:,1),  inlight@CMF(:,4))
    # legend('x-', 'y-', 'z-')
    # figure
    # plot(CMF(:,1), testlight, CMF(:,1), ref)
    # plot(TC(:,1), TC(:,2), TC(:,1), TC(:,3), TC(:,1), TC(:,4), TC(:,1), TC(:,5), TC(:,1), TC(:,6), TC(:,1), TC(:,7), TC(:,1), TC(:,8))
    # legend('1','2','3','4','5','6','7')
    
    x_tris_ref = np.array([])
    y_tris_ref = np.array([])
    z_tris_ref = np.array([])
    x_ref = []
    y_ref = []
    Y_ref = []
    x_triswh_ref = []
    y_triswh_ref = []
    z_triswh_ref = []
    x_white_ref = np.array([])
    y_white_ref = np.array([])
    
    # Reflected Reference Light
    
    for i in range(14):   
        # Tristimulus Values
        TC_ = TC[:,i+1]
        TC_ = np.expand_dims(TC_, axis=1)
        x_tris_ref = np.append(x_tris_ref, sum(np.multiply(ref, CMF_1)*TC_))
        y_tris_ref = np.append(y_tris_ref, sum(np.multiply(ref, CMF_2)*TC_))   
        z_tris_ref = np.append(z_tris_ref, sum(np.multiply(ref, CMF_3)*TC_))

         # xy coordinates 
        x_ref = (np.divide(x_tris_ref, (x_tris_ref + y_tris_ref + z_tris_ref)))
        y_ref = (np.divide(y_tris_ref, (x_tris_ref + y_tris_ref + z_tris_ref)))
        Y_ref = (y_tris_ref)     
    
    x_tris_ref = np.expand_dims(x_tris_ref, axis=0)
    y_tris_ref = np.expand_dims(y_tris_ref, axis=0)
    z_tris_ref = np.expand_dims(z_tris_ref, axis=0)
    
    x_ref = np.expand_dims(x_ref, axis=0)
    y_ref = np.expand_dims(y_ref, axis=0)
    Y_ref = np.expand_dims(Y_ref, axis=0)
    
#     print('x_tris_ref.shape:',x_tris_ref.shape)
#     print('y_tris_ref.shape:',y_tris_ref.shape)
#     print('z_tris_ref.shape:',z_tris_ref.shape)
    
#     print('x_ref.shape:', x_ref.shape)
    # print('x_ref:', x_ref)
    # print('y_ref:', y_ref)
    # print('Y_ref:', Y_ref)
#     print('y_ref.shape:', y_ref.shape)
#     print('Y_ref.shape:', Y_ref.shape)
    
    x_triswh_ref.append(sum(np.multiply(ref, CMF_1)))
    y_triswh_ref.append(sum(np.multiply(ref, CMF_2)))
    z_triswh_ref.append(sum(np.multiply(ref, CMF_3)))
    
    x_triswh_ref = np.array(x_triswh_ref)
    y_triswh_ref = np.array(y_triswh_ref)
    z_triswh_ref = np.array(z_triswh_ref)  
    
#     print('x_triswh_ref.shape:',x_triswh_ref.shape)
#     print('y_triswh_ref.shape:',y_triswh_ref.shape)
#     print('z_triswh_ref.shape:',z_triswh_ref.shape)
    
    x_white_ref = np.append(x_white_ref, (np.divide(x_triswh_ref, (x_triswh_ref + y_triswh_ref + z_triswh_ref))))
    x_white_ref = np.expand_dims(x_white_ref, axis=1)
#     print('x_white_ref.shape:', x_white_ref.shape)
    
    y_white_ref = np.append(y_white_ref, (np.divide(y_triswh_ref, (x_triswh_ref + y_triswh_ref + z_triswh_ref))))
    y_white_ref = np.expand_dims(y_white_ref, axis=1)
#     print('y_white_ref.shape:', y_white_ref.shape) 

    x_tris_test = np.array([])
    y_tris_test = np.array([])
    z_tris_test = np.array([])
    x_test = []
    y_test = []
    z_test = []
    Y_test = []
    x_triswh_test = []
    y_triswh_test = []
    z_triswh_test = []
    x_white_test = np.array([])
    y_white_test = np.array([])

    # Reflected Test Light
    for i in range(14):   
        # Tristimulus Values
        #print(TC)
        TC_ = TC[:,i+1]
        TC_ = np.expand_dims(TC_, axis=1)
        x_tris_test = np.append(x_tris_test,(sum(np.multiply(testlight, CMF_1)* TC_)))
        y_tris_test = np.append(y_tris_test,(sum(np.multiply(testlight, CMF_2)* TC_)))
        z_tris_test = np.append(z_tris_test,(sum(np.multiply(testlight, CMF_3)* TC_)))
        
        # xyz coordinates 
        x_test = np.divide(x_tris_test, (x_tris_test + y_tris_test + z_tris_test))
        y_test = np.divide(y_tris_test, (x_tris_test + y_tris_test + z_tris_test))
        z_test = np.divide(z_tris_test, (x_tris_test + y_tris_test + z_tris_test))
        Y_test = y_tris_test
        
    x_tris_test = np.expand_dims(x_tris_test, axis=0)
    y_tris_test = np.expand_dims(y_tris_test, axis=0)
    z_tris_test = np.expand_dims(z_tris_test, axis=0)
    
    x_test = np.expand_dims(x_test, axis=0)
    y_test = np.expand_dims(y_test, axis=0)
    z_test = np.expand_dims(z_test, axis=0)
    Y_test = np.expand_dims(Y_test, axis=0)
    
#     print('x_tris_test.shape:',x_tris_test.shape)
#     print('y_tris_test.shape:',y_tris_test.shape)
#     print('z_tris_test.shape:',z_tris_test.shape)
    
#     print('x_test.shape:',x_test.shape)
#     print('y_test.shape:',y_test.shape)
#     print('z_test.shape:',z_test.shape)
#     print('Y_test.shape:',Y_test.shape)
    
    x_triswh_test.append(sum(np.multiply(testlight, CMF_1)))
    y_triswh_test.append(sum(np.multiply(testlight, CMF_2)))
    z_triswh_test.append(sum(np.multiply(testlight, CMF_3)))
    
    x_triswh_test = np.array(x_triswh_test)
    y_triswh_test = np.array(y_triswh_test)
    z_triswh_test = np.array(z_triswh_test)
    
    
#     print('x_triswh_test.shape:',x_triswh_test.shape)
#     print('y_triswh_test.shape:',y_triswh_test.shape)
#     print('z_triswh_test.shape:',z_triswh_test.shape)
    
    x_white_test = np.append(x_white_test,np.divide(x_triswh_test, (x_triswh_test + y_triswh_test + z_triswh_test)))
    x_white_test = np.expand_dims(x_white_test, axis=1)
#     print('x_white_test.shape:', x_white_test.shape)
    
    y_white_test = np.append(y_white_test,np.divide(y_triswh_test, (x_triswh_test + y_triswh_test + z_triswh_test)))
    y_white_test = np.expand_dims(y_white_test, axis=1)
#     print('y_white_test.shape:', y_white_test.shape)
       
    
    u_ref = []
    v_ref = []
    u_white_ref = []
    v_white_ref = []
    u_test = []
    v_test = []
    u_white_test = []
    v_white_test = []
    # Getting chromaticity: u and v
    u_ref = np.divide(4 * x_ref, (-2 * x_ref + 12 * y_ref + 3))
    #print('u_ref.shape:', u_ref.shape)
    # print('u_ref', u_ref)
                 
    v_ref = np.divide(6 * y_ref, (-2 * x_ref + 12 * y_ref + 3))           
    #print('v_ref.shape:', v_ref.shape)

    u_white_ref = np.divide(4 * x_white_ref, (-2 * x_white_ref + 12 * y_white_ref + 3))
    #print('u_white_ref.shape:', u_white_ref)
    # print('u_white_ref:', u_white_ref)
    
    v_white_ref = np.divide(6 * y_white_ref, (-2 * x_white_ref + 12 * y_white_ref + 3))
    #print('v_white_ref.shape:', v_white_ref)
    
    u_test = np.divide(4 * x_test, (-2 * x_test + 12 * y_test + 3))
    #print('u_test.shape:', u_test.shape)
    
    v_test = np.divide(6 *y_test, (-2 * x_test + 12 * y_test + 3))
    #print('v_test.shape:', v_test.shape)
    
    u_white_test = np.divide(4 * x_white_test, (-2 * x_white_test + 12 * y_white_test + 3))
    #print('u_white_test:', u_white_test)
    
    v_white_test = np.divide(6 * y_white_test, (-2 * x_white_test + 12 * y_white_test + 3))
    #print('v_white_test:', v_white_test)
    
    
    ck = []
    dk = []
    ck_wh = []
    dk_wh = []
    ck_wh_ref = []
    dk_wh_ref = []
    u_test_adap = []
    v_test_adap = []
 
    # Chromatic Adaptation
    ck = np.divide((4 - u_test - 10 * v_test), v_test)
    #print('ck.shape:', ck.shape)   
    
    dk = np.divide((1.708*v_test + 0.404 - 1.481 * u_test), v_test)
    #print('dk.shape:', dk.shape)
    
    ck_wh = np.divide((4 - u_white_test - 10 * v_white_test),v_white_test)
    #print('ck_wh.shape:', ck_wh.shape)
    
    dk_wh = np.divide((1.708 * v_white_test + 0.404 - 1.481 * u_white_test),v_white_test)
    #print('dk_wh.shape:', dk_wh.shape)
    
    ck_wh_ref = np.divide((4 - u_white_ref - 10 * v_white_ref), v_white_ref)
    #print('ck_wh.shape:', ck_wh.shape)
    
    dk_wh_ref = np.divide((1.708 * v_white_ref + 0.404 - 1.481 * u_white_ref),v_white_ref)
    #print('dk_wh_ref.shape:', dk_wh_ref.shape)
    
    u_test_adap = np.divide((10.872 + 0.404 * ck_wh_ref / ck_wh * ck - 4 * dk_wh_ref / dk_wh * dk),(16.518 + 1.481 * ck_wh_ref / ck_wh * ck - dk_wh_ref / dk_wh * dk))
    #print('u_test_adap.shape:', u_test_adap.shape)
    
    v_test_adap = np.divide(5.52, (16.518 + 1.481 * ck_wh_ref / ck_wh * ck - dk_wh_ref / dk_wh * dk))
    #print('v_test_adap.shape:', v_test_adap.shape)
    
    u_white_test = np.divide((10.872 + 0.404 * ck_wh_ref / ck_wh * ck_wh - 4 * dk_wh_ref / dk_wh * dk_wh), (16.518 + 1.481 * ck_wh_ref / ck_wh * ck_wh - dk_wh_ref / dk_wh * dk_wh) )
    #print('u_white_test.shape', u_white_test.shape)
    
    v_white_test = np.divide(5.52, (16.518 + 1.481 * ck_wh_ref / ck_wh * ck_wh - dk_wh_ref / dk_wh * dk_wh))
    #print('v_white_test.shape', v_white_test.shape)

    # Converting to UVW space
    W = 25 * Y_ref**(1/3) - 17
    U = 13 * np.multiply(W, (u_ref - u_white_ref[0,0]))
    V = 13 * np.multiply(W, (v_ref - v_white_ref[0,0]))
    W_test = 25 * Y_test**(1/3) - 17
    U_test = 13 * np.multiply(W_test, (u_test_adap - u_white_test[0,0]))
    V_test = 13 * np.multiply(W_test, (v_test_adap - v_white_test[0,0]))

    # print('W', W)
    # print('U', U)
    # print('V', V)
    # print('W_test', W_test)
    # print('U_test', U_test)
    # print('V_test', V_test)

    # Calculating Ri
    colourshift = np.sqrt((W - W_test)**2 + (U - U_test)**2 + (V - V_test)**2)
    #print('colorshift:', colourshift)
    #print(colourshift.shape)
    Ri = 100 - 4.6 * colourshift
    R9 = Ri[0,8]

    # Colour Rendering Index, Ra
    CRIscore = np.mean([Ri[0,0:8]])

    return (CRIscore, R9)

def alpha_opic_cal(spd):
    # for spd with resolution wavelength of 5 nm
    
    L_cone_data = [0,0,0.000407619000000000,0.00106921000000000,0.00254073000000000,0.00531546000000000,0.00998835000000000,0.0160130000000000,0.0233957000000000,0.0309104000000000,0.0397810000000000,0.0494172000000000,0.0594619000000000,0.0686538000000000,0.0795647000000000,0.0907704000000000,0.106663000000000,0.128336000000000,0.151651000000000,0.177116000000000,0.207940000000000,0.244046000000000,0.282752000000000,0.334786000000000,0.391705000000000,0.456252000000000,0.526538000000000,0.599867000000000,0.675313000000000,0.737108000000000,0.788900000000000,0.837403000000000,0.890871000000000,0.926660000000000,0.944527000000000,0.970703000000000,0.985636000000000,0.996979000000000,0.999543000000000,0.987057000000000,0.957841000000000,0.939781000000000,0.906693000000000,0.859605000000000,0.803173000000000,0.740680000000000,0.668991000000000,0.593248000000000,0.517449000000000,0.445125000000000,0.369168000000000,0.300316000000000,0.242316000000000,0.193730000000000,0.149509000000000,0.112638000000000,0.0838077000000000,0.0616384000000000,0.0448132000000000,0.0321660000000000,0.0227738000000000,0.0158939000000000,0.0109123000000000,0.00759453000000000,0.00528607000000000,0.00366675000000000,0.00251327000000000,0.00172108000000000,0.00118900000000000,0.000822396000000000,0.000572917000000000,0.000399670000000000,0.000278553000000000,0.000196528000000000,0.000138482000000000,9.81226000000000e-05,6.98827000000000e-05,4.98430000000000e-05,3.57781000000000e-05,2.56411000000000e-05,1.85766000000000e-05]
    M_cone_data = [0,0,0.000358227000000000,0.000964828000000000,0.00237208000000000,0.00512316000000000,0.00998841000000000,0.0172596000000000,0.0273163000000000,0.0396928000000000,0.0555384000000000,0.0750299000000000,0.0957612000000000,0.116220000000000,0.139493000000000,0.162006000000000,0.193202000000000,0.232275000000000,0.271441000000000,0.310372000000000,0.355066000000000,0.405688000000000,0.456137000000000,0.522970000000000,0.591003000000000,0.666404000000000,0.743612000000000,0.816808000000000,0.889214000000000,0.934977000000000,0.961962000000000,0.981481000000000,0.998931000000000,0.991383000000000,0.961876000000000,0.935829000000000,0.890949000000000,0.840969000000000,0.776526000000000,0.700013000000000,0.611728000000000,0.531825000000000,0.454142000000000,0.376527000000000,0.304378000000000,0.239837000000000,0.185104000000000,0.140431000000000,0.104573000000000,0.0765841000000000,0.0554990000000000,0.0397097000000000,0.0280314000000000,0.0194366000000000,0.0137660000000000,0.00954315000000000,0.00650455000000000,0.00442794000000000,0.00306050000000000,0.00211596000000000,0.00145798000000000,0.000998424000000000,0.000677653000000000,0.000467870000000000,0.000325278000000000,0.000225641000000000,0.000155286000000000,0.000107388000000000,7.49453000000000e-05,5.24748000000000e-05,3.70443000000000e-05,2.62088000000000e-05,1.85965000000000e-05,1.33965000000000e-05,9.63397000000000e-06,6.96522000000000e-06,5.06711000000000e-06,3.68617000000000e-06,2.69504000000000e-06,1.96864000000000e-06,1.45518000000000e-06]
    S_cone_data = [0,0,0.00614265000000000,0.0159515000000000,0.0396308000000000,0.0897612000000000,0.178530000000000,0.305941000000000,0.462692000000000,0.609570000000000,0.756885000000000,0.869984000000000,0.966960000000000,0.993336000000000,0.991329000000000,0.906735000000000,0.823726000000000,0.737043000000000,0.610456000000000,0.470894000000000,0.350108000000000,0.258497000000000,0.185297000000000,0.135351000000000,0.0967990000000000,0.0649614000000000,0.0412337000000000,0.0271300000000000,0.0176298000000000,0.0113252000000000,0.00717089000000000,0.00454287000000000,0.00283352000000000,0.00175573000000000,0.00108230000000000,0.000664512000000000,0.000408931000000000,0.000251918000000000,0.000155688000000000,9.67045000000000e-05,6.04705000000000e-05,3.81202000000000e-05,2.42549000000000e-05,1.55924000000000e-05,1.01356000000000e-05,6.66657000000000e-06,4.43906000000000e-06,2.99354000000000e-06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    Rhodopic_data = [0.000589000000000000,0.00110800000000000,0.00220900000000000,0.00453000000000000,0.00929000000000000,0.0185200000000000,0.0348400000000000,0.0604000000000000,0.0966000000000000,0.143600000000000,0.199800000000000,0.262500000000000,0.328100000000000,0.393100000000000,0.455000000000000,0.513000000000000,0.567000000000000,0.620000000000000,0.676000000000000,0.734000000000000,0.793000000000000,0.851000000000000,0.904000000000000,0.949000000000000,0.982000000000000,0.998000000000000,0.997000000000000,0.975000000000000,0.935000000000000,0.880000000000000,0.811000000000000,0.733000000000000,0.650000000000000,0.564000000000000,0.481000000000000,0.402000000000000,0.328800000000000,0.263900000000000,0.207600000000000,0.160200000000000,0.121200000000000,0.0899000000000000,0.0655000000000000,0.0469000000000000,0.0331500000000000,0.0231200000000000,0.0159300000000000,0.0108800000000000,0.00737000000000000,0.00497000000000000,0.00333500000000000,0.00223500000000000,0.00149700000000000,0.00100500000000000,0.000677000000000000,0.000459000000000000,0.000312900000000000,0.000214600000000000,0.000148000000000000,0.000102600000000000,7.15000000000000e-05,5.01000000000000e-05,3.53300000000000e-05,2.50100000000000e-05,1.78000000000000e-05,1.27300000000000e-05,9.14000000000000e-06,6.60000000000000e-06,4.78000000000000e-06,3.48200000000000e-06,2.54600000000000e-06,1.87000000000000e-06,1.37900000000000e-06,1.02200000000000e-06,7.60000000000000e-07,5.67000000000000e-07,4.25000000000000e-07,3.19600000000000e-07,2.41300000000000e-07,1.82900000000000e-07,1.39000000000000e-07]
    Melanopic_data = [0.000918165000000000,0.00166724000000000,0.00309442000000000,0.00588035000000000,0.0114277000000000,0.0228112000000000,0.0461550000000000,0.0794766000000000,0.137237000000000,0.187096000000000,0.253865000000000,0.320679000000000,0.401587000000000,0.474002000000000,0.553715000000000,0.629654000000000,0.708049000000000,0.785216000000000,0.860291000000000,0.917734000000000,0.965605000000000,0.990621000000000,1,0.992022000000000,0.965952000000000,0.922299000000000,0.862888000000000,0.785233000000000,0.699628000000000,0.609422000000000,0.519309000000000,0.432533000000000,0.351707000000000,0.279135000000000,0.215722000000000,0.162056000000000,0.118526000000000,0.0843457000000000,0.0587013000000000,0.0400089000000000,0.0268747000000000,0.0178624000000000,0.0117901000000000,0.00773430000000000,0.00506686000000000,0.00331766000000000,0.00217698000000000,0.00143314000000000,0.000947313000000000,0.000627648000000000,0.000417955000000000,0.000279801000000000,0.000188341000000000,0.000127337000000000,8.65751000000000e-05,5.91914000000000e-05,4.06945000000000e-05,2.81320000000000e-05,1.95535000000000e-05,1.36480000000000e-05,9.57637000000000e-06,6.75425000000000e-06,4.78804000000000e-06,3.40841000000000e-06,2.43819000000000e-06,1.75252000000000e-06,1.26560000000000e-06,9.18078000000000e-07,6.68991000000000e-07,4.89531000000000e-07,3.59766000000000e-07,2.65493000000000e-07,1.96740000000000e-07,1.46370000000000e-07,1.09332000000000e-07,8.19587000000000e-08,6.16749000000000e-08,4.65916000000000e-08,3.53272000000000e-08,2.68803000000000e-08,2.05258000000000e-08]
    Photopic_data = [ 3.90000000000000e-05, 6.40000000000000e-05, 0.000120000000000000, 0.000217000000000000, 0.000396000000000000, 0.000640000000000000, 0.00121000000000000, 0.00218000000000000, 0.00400000000000000, 0.00730000000000000, 0.0116000000000000, 0.0168400000000000, 0.0230000000000000, 0.0298000000000000, 0.0380000000000000, 0.0480000000000000, 0.0600000000000000, 0.0739000000000000, 0.0909800000000000, 0.112600000000000, 0.139020000000000, 0.169300000000000, 0.208020000000000, 0.258600000000000, 0.323000000000000, 0.407300000000000, 0.503000000000000, 0.608200000000000, 0.710000000000000, 0.793200000000000, 0.862000000000000, 0.914850000000000, 0.954000000000000, 0.980300000000000, 0.994950000000000, 1, 0.995000000000000, 0.978600000000000, 0.952000000000000, 0.915400000000000, 0.870000000000000, 0.816300000000000, 0.757000000000000, 0.694900000000000, 0.631000000000000, 0.566800000000000, 0.503000000000000, 0.441200000000000, 0.381000000000000, 0.321000000000000, 0.265000000000000, 0.217000000000000, 0.175000000000000, 0.138200000000000, 0.107000000000000, 0.0816000000000000, 0.0610000000000000, 0.0445800000000000, 0.0320000000000000, 0.0232000000000000, 0.0170000000000000, 0.0119200000000000, 0.00821000000000000, 0.00572300000000000, 0.00410200000000000, 0.00292900000000000, 0.00209100000000000, 0.00148400000000000, 0.00104700000000000, 0.000740000000000000, 0.000520000000000000, 0.000361000000000000, 0.000249000000000000, 0.000172000000000000, 0.000120000000000000, 8.50000000000000e-05, 6.00000000000000e-05, 4.20000000000000e-05, 3.00000000000000e-05, 2.10000000000000e-05, 1.50000000000000e-05 ]

    sum_m = 0; sum_p = 0; sum_e = 0; sum_ch = 0; sum_cy = 0; sum_r = 0
    
    for i in range(0,81):
        sum_m = sum_m + Melanopic_data[i]* spd[i] * 1000
        sum_p = sum_p + Photopic_data[i] * spd[i] * 100
        sum_e = sum_e + L_cone_data[i] * spd[i] * 1000
        sum_ch = sum_ch + M_cone_data[i] * spd[i] * 1000
        sum_cy = sum_cy + S_cone_data[i] * spd[i] * 1000
        sum_r = sum_r + Rhodopic_data[i] * spd[i] * 1000
    
    medi = (sum_m* 5)/1.3262
    Photopic_lux = 6.83 * sum_p * 5
    L_cone_EDI = (sum_e*5)/1.6289
    M_cone_lEDI = (sum_ch*5)/1.4558
    S_cone_EDI = (sum_cy*5)/0.8173
    Rhodopic_EDI = (sum_r*5)/1.4497
    
    return Photopic_lux, medi


#### Converts RGB to xy
def rgbToxy(r,g,b):
    # Normalize RGB values (between 0 and 1)
    R_norm = r / 255.0
    G_norm = g / 255.0
    B_norm = b / 255.0

    # Calculate the tristimulus values
    X = 0.4124564 * R_norm + 0.3575761 * G_norm + 0.1804375 * B_norm
    Y = 0.2126729 * R_norm + 0.7151522 * G_norm + 0.0721750 * B_norm
    Z = 0.0193339 * R_norm + 0.1191920 * G_norm + 0.9503041 * B_norm
    
    # Calculate the chromaticity coordinates
    x = X / (X + Y + Z)
    y = Y / (X + Y + Z)
    
    return x, y

def xyToCCT(x,y):
    # Calculate the correlated color temperature (CCT) using McCamy's equation
    n = (x - 0.3320) / (0.1858 - y)
    cct = 449 * (n ** 3) + 3525 * (n ** 2) + 6823.3 * n + 5520.33
    
    return cct

def D_illuminant(cct):
    D_vec=np.array([[380, 63.4, 38.5, 3],[385, 64.6, 36.75, 2.1],[390, 65.8, 35, 1.2],[395, 80.3, 39.2, 0.05],
            [400, 94.8, 43.4, -1.1],[405, 99.8, 44.85, -0.8],[410, 104.8, 46.3, -0.5],[415, 105.35, 45.1, -0.6],
            [420, 105.9, 43.9, -0.7],[425, 101.35, 40.5, -0.95],[430, 96.8, 37.1, -1.2],[435, 105.35, 36.9,	-1.9],
            [440, 113.9, 36.7, -2.6],[445, 119.75, 36.3, -2.75],[450, 125.6, 35.9, -2.9],[455, 125.55, 34.25, -2.85],
            [460, 125.5, 32.6, -2.8],[465, 123.4, 30.25, -2.7],[470, 121.3, 27.9, -2.6],[475, 121.3, 26.1, -2.6],
            [480, 121.3, 24.3, -2.6],[485, 117.4, 22.2, -2.2],[490, 113.5, 20.1, -1.8],[495, 113.3, 18.15, -1.65],
            [500, 113.1, 16.2, -1.5],[505, 111.95, 14.7, -1.4],[510, 110.8, 13.2, -1.3],[515, 108.65, 10.9, -1.25],
            [520, 106.5, 8.6, -1.2],[525, 107.65, 7.35, -1.1],[530, 108.8, 6.1, -1],[535, 107.05, 5.15, -0.75],
            [540, 105.3, 4.2, -0.5],[545, 104.85, 3.05, -0.4],[550, 104.4, 1.9, -0.3],[555, 102.2, 0.95, -0.15],
            [560, 100, 0, 0],[565, 98, -0.8, 0.1],[570, 96, -1.6, 0.2],[575, 95.55, -2.55, 0.35],
            [580, 95.1, -3.5, 0.5],[585, 92.1, -3.5, 1.3],[590, 89.1, -3.5, 2.1],[595, 89.8, -4.65, 2.65],
            [600, 90.5, -5.8, 3.2],[605, 90.4, -6.5, 3.65],[610, 90.3, -7.2, 4.1],[615, 89.35, -7.9, 4.4],
            [620, 88.4, -8.6, 4.7],[625, 86.2, -9.05, 4.9],[630, 84, -9.5, 5.1],[635, 84.55, -10.2, 5.9],
            [640, 85.1,	-10.9, 6.7],[645, 83.5,	-10.8, 7],[650, 81.9, -10.7, 7.3],[655, 82.25, -11.35, 7.95],
            [660, 82.6, -12, 8.6],[665, 83.75, -13, 9.2],[670, 84.9, -14, 9.8],[675, 83.1, -13.8, 10],
            [680, 81.3,	-13.6, 10.2],[685, 76.6, -12.8, 9.25],[690, 71.9, -12, 8.3],[695, 73.1,	-12.65, 8.95],
            [700, 74.3,	-13.3, 9.6],[705, 75.35, -13.1, 9.05],[710, 76.4, -12.9, 8.5],[715, 69.85, -11.75, 7.75],
            [720, 63.3,	-10.6, 7],[725, 67.5, -11.1, 7.3],[730, 71.7, -11.6, 7.6],[735, 74.35, -11.9, 7.8],
            [740, 77, -12.2, 8],[745, 71.1,	-11.2, 7.35],[750, 65.2, -10.2, 6.7],[755, 56.45, -9, 5.95],
            [760, 47.7, -7.8, 5.2],[765, 58.15, -9.5, 6.3],[770, 68.6, -11.2, 7.4],[775, 66.8, -10.8, 7.1],
            [780, 65, -10.4, 6.8]])

    s0=D_vec[:,1]
    s1=D_vec[:,2]
    s2=D_vec[:,3]
    spd = []
    wavelengths = np.arange(380, 781, 5)  # Wavelength range from 380 nm to 780 nm
    
    
    if cct <= 7000:
        xD=-4.6070e9/(cct**3)+2.9678e6/(cct**2)+0.09911e3/(cct)+0.244063
    else: #if 7000<CCT<25000
        xD=(-2.0064e9/cct**3)+(1.9018e6/cct**2)+(0.24748e3/cct)+0.237040
    
    yD=-3.000*(xD**2)+2.870*(xD)-0.275
    m1=(-1.3515-1.7703*xD+5.9114*yD)/(0.0241+0.2562*xD-0.7341*yD)
    m2=(0.0300-31.4424*xD+30.0717*yD)/(0.0241+0.2562*xD-0.7341*yD)
    
    for i in range(81):
        spd.append(s0[i]+m1*s1[i]+m2*s2[i])
    
    # Normalize the spectrum
    spd = spd / np.max(spd)
    
    return spd

#### Converts CCT to SPD from a blackbody using Planckian equation or Daylight
def planckian(cct):
    spd = []
    wavelengths = np.arange(380, 781, 5)  # Wavelength range from 380 nm to 780 nm
    
    if cct:
        # Calculate the spectral power distribution using the Planckian equation
        h = 6.62607015e-34  # Planck's constant (J.s)
        c = 299792458  # Speed of light (m/s)
        k = 1.380649e-23  # Boltzmann constant (J/K)
        
        #spd = (3.74183e-16 * np.power(wavelength_m, -5)) / (np.exp(1.4388e-2 / (wavelength_m * cct)) - 1)
        for wl in wavelengths:
            wl_m = wl * 1e-9  # Convert wavelength from nm to meters
            energy = np.pi* 2 * h * c**2 / (wl_m**5)  # Energy per unit wavelength (J/m)
            b = (energy / (np.exp(h * c / (wl_m * k * cct)) - 1))  # Planckian equation
            b = b*(1e-9)*(2.177e-5)
            spd.append(b)
    
    # Normalize the spectrum
    spd = spd / np.max(spd)
    
    return wavelengths, spd

def reflight(CCT):
## CIE 1931 2-degrees Color Matching Function
    CMF = np.array([[380,0.001368,0.000039,0.006450],
            [385,0.002236,0.000064,0.010550],
            [390,0.004243,0.000120,0.020050],
            [395,0.007650,0.000217,0.036210],
            [400,0.014310,0.000396,0.067850],
            [405,0.023190,0.000640,0.110200],
            [410,0.043510,0.001210,0.207400],
            [415,0.077630,0.002180,0.371300],
            [420,0.134380,0.004000,0.645600],
            [425,0.214770,0.007300,1.039050],
            [430,0.283900,0.011600,1.385600],
            [435,0.328500,0.016840,1.622960],
            [440,0.348280,0.023000,1.747060],
            [445,0.348060,0.029800,1.782600],
            [450,0.336200,0.038000,1.772110],
            [455,0.318700,0.048000,1.744100],
            [460,0.290800,0.060000,1.669200],
            [465,0.251100,0.073900,1.528100],
            [470,0.195360,0.090980,1.287640],
            [475,0.142100,0.112600,1.041900],
            [480,0.095640,0.139020,0.812950],
            [485,0.057950,0.169300,0.616200],
            [490,0.032010,0.208020,0.465180],
            [495,0.014700,0.258600,0.353300],
            [500,0.004900,0.323000,0.272000],
            [505,0.002400,0.407300,0.212300],
            [510,0.009300,0.503000,0.158200],
            [515,0.029100,0.608200,0.111700],
            [520,0.063270,0.710000,0.078250],
            [525,0.109600,0.793200,0.057250],
            [530,0.165500,0.862000,0.042160],
            [535,0.225750,0.914850,0.029840],
            [540,0.290400,0.954000,0.020300],
            [545,0.359700,0.980300,0.013400],
            [550,0.433450,0.994950,0.008750],
            [555,0.512050,1.000000,0.005750],
            [560,0.594500,0.995000,0.003900],
            [565,0.678400,0.978600,0.002750],
            [570,0.762100,0.952000,0.002100],
            [575,0.842500,0.915400,0.001800],
            [580,0.916300,0.870000,0.001650],
            [585,0.978600,0.816300,0.001400],
            [590,1.026300,0.757000,0.001100],
            [595,1.056700,0.694900,0.001000],
            [600,1.062200,0.631000,0.000800],
            [605,1.045600,0.566800,0.000600],
            [610,1.002600,0.503000,0.000340],
            [615,0.938400,0.441200,0.000240],
            [620,0.854450,0.381000,0.000190],
            [625,0.751400,0.321000,0.000100],
            [630,0.642400,0.265000,0.000050],
            [635,0.541900,0.217000,0.000030],
            [640,0.447900,0.175000,0.000020],
            [645,0.360800,0.138200,0.000010],
            [650,0.283500,0.107000,0.000000],
            [655,0.218700,0.081600,0.000000],
            [660,0.164900,0.061000,0.000000],
            [665,0.121200,0.044580,0.000000],
            [670,0.087400,0.032000,0.000000],
            [675,0.063600,0.023200,0.000000],
            [680,0.046770,0.017000,0.000000],
            [685,0.032900,0.011920,0.000000],
            [690,0.022700,0.008210,0.000000],
            [695,0.015840,0.005723,0.000000],
            [700,0.011359,0.004102,0.000000],
            [705,0.008111,0.002929,0.000000],
            [710,0.005790,0.002091,0.000000],
            [715,0.004109,0.001484,0.000000],
            [720,0.002899,0.001047,0.000000],
            [725,0.002049,0.000740,0.000000],
            [730,0.001440,0.000520,0.000000],
            [735,0.001000,0.000361,0.000000],
            [740,0.000690,0.000249,0.000000],
            [745,0.000476,0.000172,0.000000],
            [750,0.000332,0.000120,0.000000],
            [755,0.000235,0.000085,0.000000],
            [760,0.000166,0.000060,0.000000],
            [765,0.000117,0.000042,0.000000],
            [770,0.000083,0.000030,0.000000],
            [775,0.000059,0.000021,0.000000],
            [780,0.000042,0.000015,0.000000]])
        
## Daylight Vector for calculating CIE Standard D Illuminants

    D_vec = np.array([[380, 63.4, 38.5, 3],
                [385, 64.6, 36.75, 2.1],
                [390, 65.8, 35, 1.2],
                [395, 80.3, 39.2, 0.05],
                [400, 94.8, 43.4, -1.1],
                [405, 99.8, 44.85, -0.8],
                [410, 104.8,46.3, -0.5],
                [415, 105.35,45.1, -0.6],
                [420, 105.9, 43.9, -0.7],
                [425, 101.35, 40.5, -0.95],
                [430, 96.8, 37.1, -1.2],
                [435, 105.35, 36.9, -1.9], 
                [440, 113.9, 36.7, -2.6],
                [445, 119.75,36.3, -2.75],
                [450, 125.6, 35.9, -2.9],
                [455, 125.55, 34.25, -2.85],
                [460, 125.5, 32.6, -2.8],
                [465, 123.4, 30.25, -2.7],
                [470, 121.3, 27.9, -2.6],
                [475, 121.3,26.1,-2.6],
                [480, 121.3,24.3,-2.6],
                [485, 117.4,22.2,-2.2],
                [490, 113.5,20.1,-1.8],
                [495, 113.3,18.15,-1.65],
                [500, 113.1,16.2,-1.5],
                [505, 111.95,14.7,-1.4],
                [510, 110.8,13.2,-1.3],
                [515, 108.65,10.9,-1.25],
                [520, 106.5,8.6, -1.2],
                [525, 107.65,7.35,-1.1],
                [530, 108.8, 6.1, -1],
                [535, 107.05, 5.15, -0.75],
                [540, 105.3, 4.2, -0.5],
                [545, 104.85, 3.05, -0.4],
                [550, 104.4, 1.9, -0.3],
                [555, 102.2, 0.95, -0.15],
                [560, 100, 0, 0],
                [565, 98, -0.8, 0.1],
                [570, 96, -1.6, 0.2],
                [575, 95.55,-2.55,0.35],
                [580, 95.1,-3.5,0.5],
                [585, 92.1,-3.5,1.3],
                [590, 89.1,-3.5,2.1],
                [595, 89.8,-4.65,2.65],
                [600, 90.5,-5.8,3.2],
                [605, 90.4,-6.5,3.65],
                [610, 90.3,-7.2,4.1],
                [615, 89.35,-7.9,4.4],
                [620, 88.4,-8.6,4.7],
                [625, 86.2,-9.05,4.9],
                [630, 84, -9.5,5.1],
                [635, 84.55,-10.2,5.9],
                [640, 85.1,-10.9,6.7],
                [645, 83.5,-10.8,7],
                [650, 81.9,-10.7,7.3],
                [655, 82.25,-11.35,7.95],
                [660, 82.6,-12, 8.6],
                [665, 83.75,-13, 9.2],
                [670, 84.9,-14, 9.8],
                [675, 83.1,-13.8,10],
                [680, 81.3,-13.6,10.2],
                [685, 76.6,-12.8,9.25],
                [690, 71.9,-12, 8.3],
                [695, 73.1,-12.65,8.95],
                [700, 74.3, -13.3, 9.6],
                [705, 75.35, -13.1, 9.05],
                [710, 76.4, -12.9, 8.5],
                [715, 69.85,-11.75, 7.75],
                [720, 63.3,-10.6, 7],
                [725, 67.5,-11.1,7.3],
                [730, 71.7,-11.6, 7.6],
                [735, 74.35,-11.9, 7.8],
                [740, 77, -12.2, 8],
                [745, 71.1,-11.2,7.35],
                [750, 65.2,-10.2,6.7],
                [755, 56.45,-9, 5.95],
                [760, 47.7,-7.8,5.2],
                [765, 58.15,-9.5,6.3],
                [770, 68.6,-11.2,7.4],
                [775, 66.8,-10.8,7.1],
                [780, 65, -10.4,6.8]])

    S0 = D_vec[:,1]
    S1 = D_vec[:,2]
    S2 = D_vec[:,3]
    
    S0 = np.expand_dims(S0, axis=1)
    S1 = np.expand_dims(S1, axis=1)
    S2 = np.expand_dims(S2, axis=1)
    
#==========================================================================

    lambda_ = CMF[:,0]
    lambda_ = np.expand_dims(lambda_, axis=1)

    PlanckLaw = np.zeros((81,1))
    Daylight = np.zeros((81,1))

    #if CCT<5000K --> use Planckian Radiator as reference
    #if CCT>5000K --> use Daylight
    ref = []
    if (CCT<5000):#if 0<CCT<5000
        for j in range(81):
            PlanckLaw[j,0] = 3.7415e-16/((lambda_[j,0]*1e-9)**5)/(math.exp(0.014388/((lambda_[j,0]*1e-9)*CCT))-1)
            
        k = np.sort(PlanckLaw)
        Planck_norm = np.divide(PlanckLaw,k[-1])
        ref = Planck_norm

    else:
        if (CCT<=7000): #if 5000<CCT<7000 
            xD=-4.6070e9/(CCT**3)+2.9678e6/(CCT**2)+0.09911e3/(CCT)+0.244063
        else: #if 7000<CCT<25000

            xD=(-2.0064e9/CCT**3)+(1.9018e6/CCT**2)+(0.24748e3/CCT)+0.237040
        yD=-3.000*(xD**2)+2.870*(xD)-0.275

        M1=(-1.3515-1.7703*xD+5.9114*yD)/(0.0241+0.2562*xD-0.7341*yD)
        M2=(0.0300-31.4424*xD+30.0717*yD)/(0.0241+0.2562*xD-0.7341*yD)

        for i in range(81):
            Daylight[i,0]=S0[i,0]+M1*S1[i,0]+M2*S2[i,0]
        k=sorted(Daylight)
        ref = np.divide(Daylight, k[-1])
        
    return ref

#### Converts spectrum info to Tristimulus XYZ (mode = 1) or CIE chromaticity coordinates xy (mode = 2)
def xyz(spd, mode):
    cie_2deg_CMF = [[0.001368,  0.000039,   0.006450],[0.002236,    0.000064,   0.010550],[0.004243,	0.000120,	0.020050],
                    [0.007650,	0.000217,	0.036210],[0.014310,	0.000396,	0.067850],[0.023190,	0.000640,	0.110200],
                    [0.043510,	0.001210,	0.207400],[0.077630,	0.002180,	0.371300],[0.134380,	0.004000,	0.645600],
                    [0.214770,	0.007300,	1.039050],[0.283900,	0.011600,	1.385600],[0.328500,	0.016840,	1.622960],
                    [0.348280,	0.023000,	1.747060],[0.348060,	0.029800,	1.782600],[0.336200,	0.038000,	1.772110],
                    [0.318700,	0.048000,	1.744100],[0.290800,	0.060000,	1.669200],[0.251100,	0.073900,	1.528100],
                    [0.195360,	0.090980,	1.287640],[0.142100,	0.112600,	1.041900],[0.095640,	0.139020,	0.812950],
                    [0.057950,	0.169300,	0.616200],[0.032010,	0.208020,	0.465180],[0.014700,	0.258600,	0.353300],
                    [0.004900,	0.323000,	0.272000],[0.002400,	0.407300,	0.212300],[0.009300,	0.503000,	0.158200],
                    [0.029100,	0.608200,	0.111700],[0.063270,	0.710000,	0.078250],[0.109600,	0.793200,	0.057250],
                    [0.165500,	0.862000,	0.042160],[0.225750,	0.914850,	0.029840],[0.290400,	0.954000,	0.020300],
                    [0.359700,	0.980300,	0.013400],[0.433450,	0.994950,	0.008750],[0.512050,	1.000000,	0.005750],
                    [0.594500,	0.995000,	0.003900],[0.678400,	0.978600,	0.002750],[0.762100,	0.952000,	0.002100],
                    [0.842500,	0.915400,	0.001800],[0.916300,	0.870000,	0.001650],[0.978600,	0.816300,	0.001400],
                    [1.026300,	0.757000,	0.001100],[1.056700,	0.694900,	0.001000],[1.062200,	0.631000,	0.000800],
                    [1.045600,	0.566800,	0.000600],[1.002600,	0.503000,	0.000340],[0.938400,	0.441200,	0.000240],
                    [0.854450,	0.381000,	0.000190],[0.751400,	0.321000,	0.000100],[0.642400,	0.265000,	0.000050],
                    [0.541900,	0.217000,	0.000030],[0.447900,	0.175000,	0.000020],[0.360800,	0.138200,	0.000010],
                    [0.283500,	0.107000,	0.000000],[0.218700,	0.081600,	0.000000],[0.164900,	0.061000,	0.000000],
                    [0.121200,	0.044580,	0.000000],[0.087400,	0.032000,	0.000000],[0.063600,	0.023200,	0.000000],
                    [0.046770,	0.017000,	0.000000],[0.032900,	0.011920,	0.000000],[0.022700,	0.008210,	0.000000],
                    [0.015840,	0.005723,	0.000000],[0.011359,	0.004102,	0.000000],[0.008111,	0.002929,	0.000000],
                    [0.005790,	0.002091,	0.000000],[0.004109,	0.001484,	0.000000],[0.002899,	0.001047,	0.000000],
                    [0.002049,	0.000740,	0.000000],[0.001440,	0.000520,	0.000000],[0.001000,	0.000361,	0.000000],
                    [0.000690,	0.000249,	0.000000],[0.000476,	0.000172,	0.000000],[0.000332,	0.000120,	0.000000],
                    [0.000235,	0.000085,	0.000000],[0.000166,	0.000060,	0.000000],[0.000117,	0.000042,	0.000000],
                    [0.000083,	0.000030,	0.000000],[0.000059,	0.000021,	0.000000],[0.000042,	0.000015,	0.000000]]
    
    # Apply CIE 1931 2-degree color matching functions
    XYZ = np.dot(spd, cie_2deg_CMF)
    
    # Normalize XYZ values
    XYZ_norm = XYZ/np.sum(XYZ)
    
    # Convert to CIE chromaticity coordinates
    x = XYZ_norm [0] / (XYZ_norm[0] + XYZ_norm[1] + XYZ_norm[2])
    y = XYZ_norm[1] / (XYZ_norm[0] + XYZ_norm[1] + XYZ_norm[2])
    
    
    if mode == 1:
        return XYZ[0], XYZ[1], XYZ[2]
    elif mode == 2:
        return x, y, 1-(x+y)

#### Converts xy coordinates to RGB values
def CIExyToRGB(x,y):
    # Convert to RGB using sRGB gamut
    M = np.array([[3.2406, -1.5372, -0.4986],
                  [-0.9689, 1.8758, 0.0415],
                  [0.0557, -0.2040, 1.0570]])
    
    #M = np.array([[0.64, 0.3, 0.155],
    #              [0.33, 0.6, 0.06],
    #              [0.03, 0.1, 0.785]])

    xyz = np.array([x, y, 1 - (x + y)])
    RGB = np.dot(M, xyz.T)

    # Apply gamma correction
    gamma = 2.134
    RGB_gamma = np.clip(RGB, 0, 1)  # Clip values to the valid range [0, 1]
    RGB_gamma = np.power(RGB, 1 / gamma)

    return RGB*255, RGB_gamma*255

# calculate Duv
def calculateDuv(x,y,z):
    #u_prime = 4 * X / (X + 15 * Y + 3 * Z)
    #v_prime = 9 * Y / (X + 15 * Y + 3 * Z)
    
    # # According the ANSI C78.377-2011
    u = 4*x / (-2*x + 12*y + 3)
    v = 6*y / (-2*x + 12*y + 3)
    
    # constants
    k0 = -0.471106
    k1 = 1.925865
    k2 = -2.4243787
    k3 = 1.5317403
    k4 = -0.5179722
    k5 = 0.0893944
    k6 = -0.00616793
    
    Lfp = np.sqrt((u - 0.292)**2 + (v-0.24)**2)
    a = np.arccos((u-0.292)/Lfp)
    Lbb = k6*(a**6) + k5*(a**5) + k4*(a**4) + k3*(a**3) + k2*(a**2) + k1*(a**1) + k0
    # Calculate Duv
    duv = Lbb - Lfp
    
    return duv

def spectrumToRGB(spd):
    x,y,z = xyz(spd, 2)
    RGBval = CIExyToRGB(x,y)
    
    return RGBval

def approximate_spectrum(rgb, wavelengths):
    # Define the peak wavelengths and bandwidths for each color channel (assumed values)
    red_peak = 625  # Peak wavelength for the red channel (in nm)
    red_bandwidth = 20/2  # Bandwidth for the red channel (in nm) (FWHM of red)

    green_peak = 525  # Peak wavelength for the green channel (in nm)
    green_bandwidth = 30/2  # Bandwidth for the green channel (in nm)

    blue_peak = 460  # Peak wavelength for the blue channel (in nm)
    blue_bandwidth = 40/2  # Bandwidth for the blue channel (in nm)

    # Normalize the RGB values
    normalized_rgb = np.array(rgb) / 255.0

    # Calculate the spectral response based on the Gaussian functions
    red_spectrum = np.exp(-0.5 * ((wavelengths - red_peak) / red_bandwidth) ** 2)
    green_spectrum = np.exp(-0.5 * ((wavelengths - green_peak) / green_bandwidth) ** 2)
    blue_spectrum = np.exp(-0.5 * ((wavelengths - blue_peak) / blue_bandwidth) ** 2)

    # Combine the spectral responses based on the RGB values
    spectrum = normalized_rgb[0] * red_spectrum + normalized_rgb[1] * green_spectrum + normalized_rgb[2] * blue_spectrum

    spectrum = spectrum / np.max(spectrum)
    return spectrum

# calculate the real outdoor spectrum from an indoor measured spectrum
def spectrum_outside(spd_inside):
    transmittance = [2.338004756, 2.082188954, 1.826607297, 1.648148039, 1.569183342, 1.548994557, 1.552086933, 
                     1.561222862, 1.56012839, 1.549029662, 1.538765281, 1.53308513, 1.522849176, 1.498805499, 
                     1.466613906, 1.432572651, 1.401105644, 1.377979531, 1.361186885, 1.34864037, 1.341079514, 
                     1.335405449, 1.331979723, 1.327808816, 1.323865055, 1.322058688, 1.322251478, 1.321972122, 
                     1.326892526, 1.329878076, 1.334337753, 1.339994934, 1.343942718, 1.352516039, 1.362649135, 
                     1.37186389, 1.382542096, 1.392611548, 1.404594382, 1.41825938, 1.433813774, 1.448186235, 
                     1.465315494, 1.486023421, 1.510978262, 1.531931612, 1.557090204, 1.581814627, 1.609254977, 
                     1.640933636, 1.67471859, 1.711744226, 1.745786947, 1.781547664, 1.820366931, 1.867502167, 
                     1.908482872, 1.956444865, 2.00704026, 2.060261172, 2.114043727, 2.166818767, 2.238444185, 
                     2.31652312, 2.376151585, 2.461674294, 2.548463931, 2.588610774, 2.722378375, 2.820042507, 
                     2.926065048, 3.008438881, 3.12657895, 3.184963378, 3.278713458, 3.380522881, 3.447122095, 
                     3.603270794, 3.730644807, 3.84564814, 3.909137942]
    
    spd_outside = spd_inside * transmittance
    
    return spd_outside

def spectrum_inside(spd_outside):
    spd_inside = []
    transmittance = [2.338004756, 2.082188954, 1.826607297, 1.648148039, 1.569183342, 1.548994557, 1.552086933, 
                     1.561222862, 1.56012839, 1.549029662, 1.538765281, 1.53308513, 1.522849176, 1.498805499, 
                     1.466613906, 1.432572651, 1.401105644, 1.377979531, 1.361186885, 1.34864037, 1.341079514, 
                     1.335405449, 1.331979723, 1.327808816, 1.323865055, 1.322058688, 1.322251478, 1.321972122, 
                     1.326892526, 1.329878076, 1.334337753, 1.339994934, 1.343942718, 1.352516039, 1.362649135, 
                     1.37186389, 1.382542096, 1.392611548, 1.404594382, 1.41825938, 1.433813774, 1.448186235, 
                     1.465315494, 1.486023421, 1.510978262, 1.531931612, 1.557090204, 1.581814627, 1.609254977, 
                     1.640933636, 1.67471859, 1.711744226, 1.745786947, 1.781547664, 1.820366931, 1.867502167, 
                     1.908482872, 1.956444865, 2.00704026, 2.060261172, 2.114043727, 2.166818767, 2.238444185, 
                     2.31652312, 2.376151585, 2.461674294, 2.548463931, 2.588610774, 2.722378375, 2.820042507, 
                     2.926065048, 3.008438881, 3.12657895, 3.184963378, 3.278713458, 3.380522881, 3.447122095, 
                     3.603270794, 3.730644807, 3.84564814, 3.909137942]
    
    for i in range(len(transmittance)):
        spd_inside.append(spd_outside[i] / transmittance[i])
    
    return spd_inside


def linear_interpolation(x_values, y_values, x):
    """
    Perform linear interpolation to estimate the value of y at a given x.

    Arguments:
    x_values -- list of x values (must be sorted in ascending order)
    y_values -- list of corresponding y values
    x -- value of x for which y is estimated

    Returns:
    y -- estimated value of y at x
    """
    if x < x_values[0] or x > x_values[-1]:
        raise ValueError("x is outside the range of x_values.")

    # Find the indices of the two nearest x values
    i = 0
    while x_values[i] < x:
        i += 1

    # Perform linear interpolation
    x0 = x_values[i - 1]
    x1 = x_values[i]
    y0 = y_values[i - 1]
    y1 = y_values[i]
    y = y0 + ((x - x0) / (x1 - x0)) * (y1 - y0)

    return y

def window_dist(position):
    #### Distance values from Rhino 7
    # distance from zone to right windows
    dwr = [2741, 2741, 2741, 2741, 2741, 2741, 2014, 2014, 2014, 2014, 2014, 2014,
        1287, 1287, 1287, 1287, 1287, 1287, 559, 559, 559, 559, 559, 559]
    # distance form zone to bottom windows
    dwb = [623, 1511, 2406, 3293, 4188, 5072, 623, 1511, 2406, 3293, 4188, 5072, 
        623, 1511, 2406, 3293, 4188, 5072, 623, 1511, 2406, 3293, 4188, 5072]
    
    return dwr[position-1], dwb[position-1]
      
      
def cal_LER(spd):
    Photopic_data = [ 3.90000000000000e-05, 6.40000000000000e-05, 0.000120000000000000, 0.000217000000000000, 
                     0.000396000000000000, 0.000640000000000000, 0.00121000000000000, 0.00218000000000000, 
                     0.00400000000000000, 0.00730000000000000, 0.0116000000000000, 0.0168400000000000, 
                     0.0230000000000000, 0.0298000000000000, 0.0380000000000000, 0.0480000000000000, 
                     0.0600000000000000, 0.0739000000000000, 0.0909800000000000, 0.112600000000000, 
                     0.139020000000000, 0.169300000000000, 0.208020000000000, 0.258600000000000, 
                     0.323000000000000, 0.407300000000000, 0.503000000000000, 0.608200000000000, 
                     0.710000000000000, 0.793200000000000, 0.862000000000000, 0.914850000000000, 
                     0.954000000000000, 0.980300000000000, 0.994950000000000, 1, 0.995000000000000, 
                     0.978600000000000, 0.952000000000000, 0.915400000000000, 0.870000000000000, 
                     0.816300000000000, 0.757000000000000, 0.694900000000000, 0.631000000000000, 
                     0.566800000000000, 0.503000000000000, 0.441200000000000, 0.381000000000000, 
                     0.321000000000000, 0.265000000000000, 0.217000000000000, 0.175000000000000, 
                     0.138200000000000, 0.107000000000000, 0.0816000000000000, 0.0610000000000000, 
                     0.0445800000000000, 0.0320000000000000, 0.0232000000000000, 0.0170000000000000, 
                     0.0119200000000000, 0.00821000000000000, 0.00572300000000000, 0.00410200000000000, 
                     0.00292900000000000, 0.00209100000000000, 0.00148400000000000, 0.00104700000000000, 
                     0.000740000000000000, 0.000520000000000000, 0.000361000000000000, 0.000249000000000000, 
                     0.000172000000000000, 0.000120000000000000, 8.50000000000000e-05, 6.00000000000000e-05, 
                     4.20000000000000e-05, 3.00000000000000e-05, 2.10000000000000e-05, 1.50000000000000e-05 ]

    wavelengths = np.arange(380, 781, 5)
    sum_p = 0
    for i in range(0,81):
        sum_p = sum_p + Photopic_data[i] * spd[i] * 100

    plux = 6.83 * sum_p * 5 # lm/m^2
    total_irr = np.trapz(y=spd, x=wavelengths) # W/m^2
    #total_power = total_irr * 19.77 # W
    ler = plux/total_irr # lm/W
    
    return ler

def cal_lumen(spd):
    Photopic_data = [ 3.90000000000000e-05, 6.40000000000000e-05, 0.000120000000000000, 0.000217000000000000, 
                     0.000396000000000000, 0.000640000000000000, 0.00121000000000000, 0.00218000000000000, 
                     0.00400000000000000, 0.00730000000000000, 0.0116000000000000, 0.0168400000000000, 
                     0.0230000000000000, 0.0298000000000000, 0.0380000000000000, 0.0480000000000000, 
                     0.0600000000000000, 0.0739000000000000, 0.0909800000000000, 0.112600000000000, 
                     0.139020000000000, 0.169300000000000, 0.208020000000000, 0.258600000000000, 
                     0.323000000000000, 0.407300000000000, 0.503000000000000, 0.608200000000000, 
                     0.710000000000000, 0.793200000000000, 0.862000000000000, 0.914850000000000, 
                     0.954000000000000, 0.980300000000000, 0.994950000000000, 1, 0.995000000000000, 
                     0.978600000000000, 0.952000000000000, 0.915400000000000, 0.870000000000000, 
                     0.816300000000000, 0.757000000000000, 0.694900000000000, 0.631000000000000, 
                     0.566800000000000, 0.503000000000000, 0.441200000000000, 0.381000000000000, 
                     0.321000000000000, 0.265000000000000, 0.217000000000000, 0.175000000000000, 
                     0.138200000000000, 0.107000000000000, 0.0816000000000000, 0.0610000000000000, 
                     0.0445800000000000, 0.0320000000000000, 0.0232000000000000, 0.0170000000000000, 
                     0.0119200000000000, 0.00821000000000000, 0.00572300000000000, 0.00410200000000000, 
                     0.00292900000000000, 0.00209100000000000, 0.00148400000000000, 0.00104700000000000, 
                     0.000740000000000000, 0.000520000000000000, 0.000361000000000000, 0.000249000000000000, 
                     0.000172000000000000, 0.000120000000000000, 8.50000000000000e-05, 6.00000000000000e-05, 
                     4.20000000000000e-05, 3.00000000000000e-05, 2.10000000000000e-05, 1.50000000000000e-05 ]
    wavelengths = np.arange(380, 781, 5)
    sum_p = 0
    for i in range(0,81):
        sum_p = sum_p + Photopic_data[i] * spd[i] * 100

    plux = 6.83 * sum_p * 5 # lm/m^2
    #total_irr = np.trapz(y=spd, x=wavelengths) # W/m^2
    # total power = total irradiance * area of the room (assuming the light is uniform distributed)
    # area of the mock living room = 19.77 m^2
    total_power = plux * 19.77 # W
    
    return total_power


def getZonesSPD(spd_room, zones_illum):
    plux_temp, medi_temp = alpha_opic_cal(spd_room)

    zones_ratio = zones_illum / plux_temp
    zones_spec = []
    for i in range(len(zones_ratio)):
        spd_temp = []
        for j in range(len(spd_room)):
            spd_temp.append(spd_room[j] * zones_ratio[i])
        zones_spec.append(spd_temp)

    return zones_spec
    

def getActualSPD(spd_room, illum, select):
    plux_temp, medi_temp = alpha_opic_cal(spd_room)

    if select == 1:
        ratio = illum / plux_temp
    elif select == 2:
        ratio = illum / medi_temp
    
    spd_temp = []
    for j in range(len(spd_room)):
        spd_temp.append(spd_room[j] * ratio)

    return spd_temp

def cal_all_zones(zones_spd):
    plux_all = []
    medi_all = []
    cct_all = []
    cri_all = []
    
    for i in range(len(zones_spd)):
        temp1, temp2 = alpha_opic_cal(zones_spd[i])
        x,y,z = xyz(zones_spd[i], 2)
        temp3 = xyToCCT(x,y)
        
        temp4, r9 = getcri(np.array([zones_spd[i]]), reflight(temp3))
        
        plux_all.append(temp1)
        medi_all.append(temp2)
        cct_all.append(temp3)
        cri_all.append(temp4)
    
    return plux_all, medi_all, cct_all, cri_all


def wavelength_to_rgb(wavelength, gamma=0.8):
    wavelength = float(wavelength)
    if wavelength >= 380 and wavelength <= 780:
        A = 1.
    else:
        A=0.5
    if wavelength < 380:
        wavelength = 380.
    if wavelength >780:
        wavelength = 780.
    if wavelength >= 380 and wavelength <= 440:
        attenuation = 0.3 + 0.7 * (wavelength - 380) / (440 - 380)
        R = ((-(wavelength - 440) / (440 - 380)) * attenuation) ** gamma
        G = 0.0
        B = (1.0 * attenuation) ** gamma
    elif wavelength >= 440 and wavelength <= 490:
        R = 0.0
        G = ((wavelength - 440) / (490 - 440)) ** gamma
        B = 1.0
    elif wavelength >= 490 and wavelength <= 510:
        R = 0.0
        G = 1.0
        B = (-(wavelength - 510) / (510 - 490)) ** gamma
    elif wavelength >= 510 and wavelength <= 580:
        R = ((wavelength - 510) / (580 - 510)) ** gamma
        G = 1.0
        B = 0.0
    elif wavelength >= 580 and wavelength <= 645:
        R = 1.0
        G = (-(wavelength - 645) / (645 - 580)) ** gamma
        B = 0.0
    elif wavelength >= 645 and wavelength <= 780:
        attenuation = 0.3 + 0.7 * (780 - wavelength) / (780 - 645)
        R = (1.0 * attenuation) ** gamma
        G = 0.0
        B = 0.0
    else:
        R = 0.0
        G = 0.0
        B = 0.0
    return (R,G,B,A)