import numpy as np

def  getcri(inlight, ref):
    CMF =  np.array([[380,0.001368,0.000039,0.006450],
            [385,0.002236,0.000064,0.010550],
            [390,0.004243,0.000120,0.020050],
            [395,0.007650,0.000217,0.036210],
            [400,0.014310,0.000396,0.067850],
            [405,0.023190,0.000640,0.110200],
            [410,0.043510,0.001210,0.207400],
            [415,0.077630,0.002180,0.371300],
            [420,0.134380,0.004000,0.645600],
            [425,0.214770,0.007300,1.039050],
            [430,0.283900,0.011600,1.385600],
            [435,0.328500,0.016840,1.622960],
            [440,0.348280,0.023000,1.747060],
            [445,0.348060,0.029800,1.782600],
            [450,0.336200,0.038000,1.772110],
            [455,0.318700,0.048000,1.744100],
            [460,0.290800,0.060000,1.669200],
            [465,0.251100,0.073900,1.528100],
            [470,0.195360,0.090980,1.287640],
            [475,0.142100,0.112600,1.041900],
            [480,0.095640,0.139020,0.812950],
            [485,0.057950,0.169300,0.616200],
            [490,0.032010,0.208020,0.465180],
            [495,0.014700,0.258600,0.353300],
            [500,0.004900,0.323000,0.272000],
            [505,0.002400,0.407300,0.212300],
            [510,0.009300,0.503000,0.158200],
            [515,0.029100,0.608200,0.111700],
            [520,0.063270,0.710000,0.078250],
            [525,0.109600,0.793200,0.057250],
            [530,0.165500,0.862000,0.042160],
            [535,0.225750,0.914850,0.029840],
            [540,0.290400,0.954000,0.020300],
            [545,0.359700,0.980300,0.013400],
            [550,0.433450,0.994950,0.008750],
            [555,0.512050,1.000000,0.005750],
            [560,0.594500,0.995000,0.003900],
            [565,0.678400,0.978600,0.002750],
            [570,0.762100,0.952000,0.002100],
            [575,0.842500,0.915400,0.001800],
            [580,0.916300,0.870000,0.001650],
            [585,0.978600,0.816300,0.001400],
            [590,1.026300,0.757000,0.001100],
            [595,1.056700,0.694900,0.001000],
            [600,1.062200,0.631000,0.000800],
            [605,1.045600,0.566800,0.000600],
            [610,1.002600,0.503000,0.000340],
            [615,0.938400,0.441200,0.000240],
            [620,0.854450,0.381000,0.000190],
            [625,0.751400,0.321000,0.000100],
            [630,0.642400,0.265000,0.000050],
            [635,0.541900,0.217000,0.000030],
            [640,0.447900,0.175000,0.000020],
            [645,0.360800,0.138200,0.000010],
            [650,0.283500,0.107000,0.000000],
            [655,0.218700,0.081600,0.000000],
            [660,0.164900,0.061000,0.000000],
            [665,0.121200,0.044580,0.000000],
            [670,0.087400,0.032000,0.000000],
            [675,0.063600,0.023200,0.000000],
            [680,0.046770,0.017000,0.000000],
            [685,0.032900,0.011920,0.000000],
            [690,0.022700,0.008210,0.000000],
            [695,0.015840,0.005723,0.000000],
            [700,0.011359,0.004102,0.000000],
            [705,0.008111,0.002929,0.000000],
            [710,0.005790,0.002091,0.000000],
            [715,0.004109,0.001484,0.000000],
            [720,0.002899,0.001047,0.000000],
            [725,0.002049,0.000740,0.000000],
            [730,0.001440,0.000520,0.000000],
            [735,0.001000,0.000361,0.000000],
            [740,0.000690,0.000249,0.000000],
            [745,0.000476,0.000172,0.000000],
            [750,0.000332,0.000120,0.000000],
            [755,0.000235,0.000085,0.000000],
            [760,0.000166,0.000060,0.000000],
            [765,0.000117,0.000042,0.000000],
            [770,0.000083,0.000030,0.000000],
            [775,0.000059,0.000021,0.000000],
            [780,0.000042,0.000015,0.000000]])
    
    CMF_1 = CMF[:,1]
    CMF_2 = CMF[:,2]
    CMF_3 = CMF[:,3]
    
    CMF_1 = np.expand_dims(CMF_1, axis=1)
    CMF_2 = np.expand_dims(CMF_2, axis=1)
    CMF_3 = np.expand_dims(CMF_3, axis=1)
    
    ## Munsell TC1-TC15 Test Color Sample
    TC = np.array([[380,0.219,0.07,0.065,0.074,0.295,0.151,0.378,0.104,0.066,0.05,0.111,0.12,0.104,0.036,0.131],
    [385,0.239,0.079,0.068,0.083,0.306,0.203,0.459,0.129,0.062,0.054,0.121,0.103,0.127,0.036,0.139],
    [390,0.252,0.089,0.07,0.093,0.31,0.265,0.524,0.17,0.058,0.059,0.127,0.09,0.161,0.037,0.147],
    [395,0.256,0.101,0.072,0.105,0.312,0.339,0.546,0.24,0.055,0.063,0.129,0.082,0.211,0.038,0.153],
    [400,0.256,0.111,0.073,0.116,0.313,0.41,0.551,0.319,0.052,0.066,0.127,0.076,0.264,0.039,0.158],
    [405,0.254,0.116,0.073,0.121,0.315,0.464,0.555,0.416,0.052,0.067,0.121,0.068,0.313,0.039,0.162],
    [410,0.252,0.118,0.074,0.124,0.319,0.492,0.559,0.462,0.051,0.068,0.116,0.064,0.341,0.04,0.164],
    [415,0.248,0.12,0.074,0.126,0.322,0.508,0.56,0.482,0.05,0.069,0.112,0.065,0.352,0.041,0.167],
    [420,0.244,0.121,0.074,0.128,0.326,0.517,0.561,0.49,0.05,0.069,0.108,0.075,0.359,0.042,0.17],
    [425,0.24,0.122,0.073,0.131,0.33,0.524,0.558,0.488,0.049,0.07,0.105,0.093,0.361,0.042,0.175],
    [430,0.237,0.122,0.073,0.135,0.334,0.531,0.556,0.482,0.048,0.072,0.104,0.123,0.364,0.043,0.182],
    [435,0.232,0.122,0.073,0.139,0.339,0.538,0.551,0.473,0.047,0.073,0.104,0.16,0.365,0.044,0.192],
    [440,0.23,0.123,0.073,0.144,0.346,0.544,0.544,0.462,0.046,0.076,0.105,0.207,0.367,0.044,0.203],
    [445,0.226,0.124,0.073,0.151,0.352,0.551,0.535,0.45,0.044,0.078,0.106,0.256,0.369,0.045,0.212],
    [450,0.225,0.127,0.074,0.161,0.36,0.556,0.522,0.439,0.042,0.083,0.11,0.3,0.372,0.045,0.221],
    [455,0.222,0.128,0.075,0.172,0.369,0.556,0.506,0.426,0.041,0.088,0.115,0.331,0.374,0.046,0.229],
    [460,0.22,0.131,0.077,0.186,0.381,0.554,0.488,0.413,0.038,0.095,0.123,0.346,0.376,0.047,0.236],
    [465,0.218,0.134,0.08,0.205,0.394,0.549,0.469,0.397,0.035,0.103,0.134,0.347,0.379,0.048,0.243],
    [470,0.216,0.138,0.085,0.229,0.403,0.541,0.448,0.382,0.033,0.113,0.148,0.341,0.384,0.05,0.249],
    [475,0.214,0.143,0.094,0.254,0.41,0.531,0.429,0.366,0.031,0.125,0.167,0.328,0.389,0.052,0.254],
    [480,0.214,0.15,0.109,0.281,0.415,0.519,0.408,0.352,0.03,0.142,0.192,0.307,0.397,0.055,0.259],
    [485,0.214,0.159,0.126,0.308,0.418,0.504,0.385,0.337,0.029,0.162,0.219,0.282,0.405,0.057,0.264],
    [490,0.216,0.174,0.148,0.332,0.419,0.488,0.363,0.325,0.028,0.189,0.252,0.257,0.416,0.062,0.269],
    [495,0.218,0.19,0.172,0.352,0.417,0.469,0.341,0.31,0.028,0.219,0.291,0.23,0.429,0.067,0.276],
    [500,0.223,0.207,0.198,0.37,0.413,0.45,0.324,0.299,0.028,0.262,0.325,0.204,0.443,0.075,0.284],
    [505,0.225,0.225,0.221,0.383,0.409,0.431,0.311,0.289,0.029,0.305,0.347,0.178,0.454,0.083,0.291],
    [510,0.226,0.242,0.241,0.39,0.403,0.414,0.301,0.283,0.03,0.365,0.356,0.154,0.461,0.092,0.296],
    [515,0.226,0.253,0.26,0.394,0.396,0.395,0.291,0.276,0.03,0.416,0.353,0.129,0.466,0.1,0.298],
    [520,0.225,0.26,0.278,0.395,0.389,0.377,0.283,0.27,0.031,0.465,0.346,0.109,0.469,0.108,0.296],
    [525,0.225,0.264,0.302,0.392,0.381,0.358,0.273,0.262,0.031,0.509,0.333,0.09,0.471,0.121,0.289],
    [530,0.227,0.267,0.339,0.385,0.372,0.341,0.265,0.256,0.032,0.546,0.314,0.075,0.474,0.133,0.282],
    [535,0.23,0.269,0.37,0.377,0.363,0.325,0.26,0.251,0.032,0.581,0.294,0.062,0.476,0.142,0.276],
    [540,0.236,0.272,0.392,0.367,0.353,0.309,0.257,0.25,0.033,0.61,0.271,0.051,0.483,0.15,0.274],
    [545,0.245,0.276,0.399,0.354,0.342,0.293,0.257,0.251,0.034,0.634,0.248,0.041,0.49,0.154,0.276],
    [550,0.253,0.282,0.4,0.341,0.331,0.279,0.259,0.254,0.035,0.653,0.227,0.035,0.506,0.155,0.281],
    [555,0.262,0.289,0.393,0.327,0.32,0.265,0.26,0.258,0.037,0.666,0.206,0.029,0.526,0.152,0.286],
    [560,0.272,0.299,0.38,0.312,0.308,0.253,0.26,0.264,0.041,0.678,0.188,0.025,0.553,0.147,0.291],
    [565,0.283,0.309,0.365,0.296,0.296,0.241,0.258,0.269,0.044,0.687,0.17,0.022,0.582,0.14,0.289],
    [570,0.298,0.322,0.349,0.28,0.284,0.234,0.256,0.272,0.048,0.693,0.153,0.019,0.618,0.133,0.286],
    [575,0.318,0.329,0.332,0.263,0.271,0.227,0.254,0.274,0.052,0.698,0.138,0.017,0.651,0.125,0.28],
    [580,0.341,0.335,0.315,0.247,0.26,0.225,0.254,0.278,0.06,0.701,0.125,0.017,0.68,0.118,0.285],
    [585,0.367,0.339,0.299,0.229,0.247,0.222,0.259,0.284,0.076,0.704,0.114,0.017,0.701,0.112,0.314],
    [590,0.39,0.341,0.285,0.214,0.232,0.221,0.27,0.295,0.102,0.705,0.106,0.016,0.717,0.106,0.354],
    [595,0.409,0.341,0.272,0.198,0.22,0.22,0.284,0.316,0.136,0.705,0.1,0.016,0.729,0.101,0.398],
    [600,0.424,0.342,0.264,0.185,0.21,0.22,0.302,0.348,0.19,0.706,0.096,0.016,0.736,0.098,0.44],
    [605,0.435,0.342,0.257,0.175,0.2,0.22,0.324,0.384,0.256,0.707,0.092,0.016,0.742,0.095,0.47],
    [610,0.442,0.342,0.252,0.169,0.194,0.22,0.344,0.434,0.336,0.707,0.09,0.016,0.745,0.093,0.494],
    [615,0.448,0.341,0.247,0.164,0.189,0.22,0.362,0.482,0.418,0.707,0.087,0.016,0.747,0.09,0.511],
    [620,0.45,0.341,0.241,0.16,0.185,0.223,0.377,0.528,0.505,0.708,0.085,0.016,0.748,0.089,0.524],
    [625,0.451,0.339,0.235,0.156,0.183,0.227,0.389,0.568,0.581,0.708,0.082,0.016,0.748,0.087,0.535],
    [630,0.451,0.339,0.229,0.154,0.18,0.233,0.4,0.604,0.641,0.71,0.08,0.018,0.748,0.086,0.544],
    [635,0.451,0.338,0.224,0.152,0.177,0.239,0.41,0.629,0.682,0.711,0.079,0.018,0.748,0.085,0.552],
    [640,0.451,0.338,0.22,0.151,0.176,0.244,0.42,0.648,0.717,0.712,0.078,0.018,0.748,0.084,0.559],
    [645,0.451,0.337,0.217,0.149,0.175,0.251,0.429,0.663,0.74,0.714,0.078,0.018,0.748,0.084,0.565],
    [650,0.45,0.336,0.216,0.148,0.175,0.258,0.438,0.676,0.758,0.716,0.078,0.019,0.748,0.084,0.571],
    [655,0.45,0.335,0.216,0.148,0.175,0.263,0.445,0.685,0.77,0.718,0.078,0.02,0.748,0.084,0.576],
    [660,0.451,0.334,0.219,0.148,0.175,0.268,0.452,0.693,0.781,0.72,0.081,0.023,0.747,0.085,0.581],
    [665,0.451,0.332,0.224,0.149,0.177,0.273,0.457,0.7,0.79,0.722,0.083,0.024,0.747,0.087,0.586],
    [670,0.453,0.332,0.23,0.151,0.18,0.278,0.462,0.705,0.797,0.725,0.088,0.026,0.747,0.092,0.59],
    [675,0.454,0.331,0.238,0.154,0.183,0.281,0.466,0.709,0.803,0.729,0.093,0.03,0.747,0.096,0.594],
    [680,0.455,0.331,0.251,0.158,0.186,0.283,0.468,0.712,0.809,0.731,0.102,0.035,0.747,0.102,0.599],
    [685,0.457,0.33,0.269,0.162,0.189,0.286,0.47,0.715,0.814,0.735,0.112,0.043,0.747,0.11,0.603],
    [690,0.458,0.329,0.288,0.165,0.192,0.291,0.473,0.717,0.819,0.739,0.125,0.056,0.747,0.123,0.606],
    [695,0.46,0.328,0.312,0.168,0.195,0.296,0.477,0.719,0.824,0.742,0.141,0.074,0.746,0.137,0.61],
    [700,0.462,0.328,0.34,0.17,0.199,0.302,0.483,0.721,0.828,0.746,0.161,0.097,0.746,0.152,0.612],
    [705,0.463,0.327,0.366,0.171,0.2,0.313,0.489,0.72,0.83,0.748,0.182,0.128,0.746,0.169,0.614],
    [710,0.464,0.326,0.39,0.17,0.199,0.325,0.496,0.719,0.831,0.749,0.203,0.166,0.745,0.188,0.616],
    [715,0.465,0.325,0.412,0.168,0.198,0.338,0.503,0.722,0.833,0.751,0.223,0.21,0.744,0.207,0.616],
    [720,0.466,0.324,0.431,0.166,0.196,0.351,0.511,0.725,0.835,0.753,0.242,0.257,0.743,0.226,0.616],
    [725,0.466,0.324,0.447,0.164,0.195,0.364,0.518,0.727,0.836,0.754,0.257,0.305,0.744,0.243,0.616],
    [730,0.466,0.324,0.46,0.164,0.195,0.376,0.525,0.729,0.836,0.755,0.27,0.354,0.745,0.26,0.615],
    [735,0.466,0.323,0.472,0.165,0.196,0.389,0.532,0.73,0.837,0.755,0.282,0.401,0.748,0.277,0.613],
    [740,0.467,0.322,0.481,0.168,0.197,0.401,0.539,0.73,0.838,0.755,0.292,0.446,0.75,0.294,0.612],
    [745,0.467,0.321,0.488,0.172,0.2,0.413,0.546,0.73,0.839,0.755,0.302,0.485,0.75,0.31,0.61],
    [750,0.467,0.32,0.493,0.177,0.203,0.425,0.553,0.73,0.839,0.756,0.31,0.52,0.749,0.325,0.609],
    [755,0.467,0.318,0.497,0.181,0.205,0.436,0.559,0.73,0.839,0.757,0.314,0.551,0.748,0.339,0.608],
    [760,0.467,0.316,0.5,0.185,0.208,0.447,0.565,0.73,0.839,0.758,0.317,0.577,0.748,0.353,0.607],
    [765,0.467,0.315,0.502,0.189,0.212,0.458,0.57,0.73,0.839,0.759,0.323,0.599,0.747,0.366,0.607],
    [770,0.467,0.315,0.505,0.192,0.215,0.469,0.575,0.73,0.839,0.759,0.33,0.618,0.747,0.379,0.609],
    [775,0.467,0.314,0.51,0.194,0.217,0.477,0.578,0.73,0.839,0.759,0.334,0.633,0.747,0.39,0.61],
    [780,0.467,0.314,0.516,0.197,0.219,0.485,0.581,0.73,0.839,0.759,0.338,0.645,0.747,0.399,0.611]])

    ##
    # Y-Normalising Light
    inlight = inlight.T
    denominator_temp = sum(np.multiply(inlight, CMF_2))
    denominator_temp = np.expand_dims(denominator_temp, axis = 0)
    testlight = inlight @ np.linalg.pinv(denominator_temp) *100
    # print('testlight:', testlight)
    ref = ref / np.sum(np.multiply(ref, CMF_2))*100
    # print('ref:', ref.flatten())

    # FOR DEBUGGING
    # plot(CMF(:,1), CMF(:,2), CMF(:,1), CMF(:,3), CMF(:,1), CMF(:,4))
    # legend('x', 'y', 'z')
    # figure
    # plot(CMF(:,1),  inlight@CMF(:,2), CMF(:,1),  inlight@CMF(:,3), CMF(:,1),  inlight@CMF(:,4))
    # legend('x-', 'y-', 'z-')
    # figure
    # plot(CMF(:,1), testlight, CMF(:,1), ref)
    # plot(TC(:,1), TC(:,2), TC(:,1), TC(:,3), TC(:,1), TC(:,4), TC(:,1), TC(:,5), TC(:,1), TC(:,6), TC(:,1), TC(:,7), TC(:,1), TC(:,8))
    # legend('1','2','3','4','5','6','7')
    
    x_tris_ref = np.array([])
    y_tris_ref = np.array([])
    z_tris_ref = np.array([])
    x_ref = []
    y_ref = []
    Y_ref = []
    x_triswh_ref = []
    y_triswh_ref = []
    z_triswh_ref = []
    x_white_ref = np.array([])
    y_white_ref = np.array([])
    
    # Reflected Reference Light
    
    for i in range(14):   
        # Tristimulus Values
        TC_ = TC[:,i+1]
        TC_ = np.expand_dims(TC_, axis=1)
        x_tris_ref = np.append(x_tris_ref, sum(np.multiply(ref, CMF_1)*TC_))
        y_tris_ref = np.append(y_tris_ref, sum(np.multiply(ref, CMF_2)*TC_))   
        z_tris_ref = np.append(z_tris_ref, sum(np.multiply(ref, CMF_3)*TC_))

         # xy coordinates 
        x_ref = (np.divide(x_tris_ref, (x_tris_ref + y_tris_ref + z_tris_ref)))
        y_ref = (np.divide(y_tris_ref, (x_tris_ref + y_tris_ref + z_tris_ref)))
        Y_ref = (y_tris_ref)     
    
    x_tris_ref = np.expand_dims(x_tris_ref, axis=0)
    y_tris_ref = np.expand_dims(y_tris_ref, axis=0)
    z_tris_ref = np.expand_dims(z_tris_ref, axis=0)
    
    x_ref = np.expand_dims(x_ref, axis=0)
    y_ref = np.expand_dims(y_ref, axis=0)
    Y_ref = np.expand_dims(Y_ref, axis=0)
    
#     print('x_tris_ref.shape:',x_tris_ref.shape)
#     print('y_tris_ref.shape:',y_tris_ref.shape)
#     print('z_tris_ref.shape:',z_tris_ref.shape)
    
#     print('x_ref.shape:', x_ref.shape)
    # print('x_ref:', x_ref)
    # print('y_ref:', y_ref)
    # print('Y_ref:', Y_ref)
#     print('y_ref.shape:', y_ref.shape)
#     print('Y_ref.shape:', Y_ref.shape)
    
    x_triswh_ref.append(sum(np.multiply(ref, CMF_1)))
    y_triswh_ref.append(sum(np.multiply(ref, CMF_2)))
    z_triswh_ref.append(sum(np.multiply(ref, CMF_3)))
    
    x_triswh_ref = np.array(x_triswh_ref)
    y_triswh_ref = np.array(y_triswh_ref)
    z_triswh_ref = np.array(z_triswh_ref)  
    
#     print('x_triswh_ref.shape:',x_triswh_ref.shape)
#     print('y_triswh_ref.shape:',y_triswh_ref.shape)
#     print('z_triswh_ref.shape:',z_triswh_ref.shape)
    
    x_white_ref = np.append(x_white_ref, (np.divide(x_triswh_ref, (x_triswh_ref + y_triswh_ref + z_triswh_ref))))
    x_white_ref = np.expand_dims(x_white_ref, axis=1)
#     print('x_white_ref.shape:', x_white_ref.shape)
    
    y_white_ref = np.append(y_white_ref, (np.divide(y_triswh_ref, (x_triswh_ref + y_triswh_ref + z_triswh_ref))))
    y_white_ref = np.expand_dims(y_white_ref, axis=1)
#     print('y_white_ref.shape:', y_white_ref.shape) 

    x_tris_test = np.array([])
    y_tris_test = np.array([])
    z_tris_test = np.array([])
    x_test = []
    y_test = []
    z_test = []
    Y_test = []
    x_triswh_test = []
    y_triswh_test = []
    z_triswh_test = []
    x_white_test = np.array([])
    y_white_test = np.array([])

    # Reflected Test Light
    for i in range(14):   
        # Tristimulus Values
        #print(TC)
        TC_ = TC[:,i+1]
        TC_ = np.expand_dims(TC_, axis=1)
        x_tris_test = np.append(x_tris_test,(sum(np.multiply(testlight, CMF_1)* TC_)))
        y_tris_test = np.append(y_tris_test,(sum(np.multiply(testlight, CMF_2)* TC_)))
        z_tris_test = np.append(z_tris_test,(sum(np.multiply(testlight, CMF_3)* TC_)))
        
        # xyz coordinates 
        x_test = np.divide(x_tris_test, (x_tris_test + y_tris_test + z_tris_test))
        y_test = np.divide(y_tris_test, (x_tris_test + y_tris_test + z_tris_test))
        z_test = np.divide(z_tris_test, (x_tris_test + y_tris_test + z_tris_test))
        Y_test = y_tris_test
        
    x_tris_test = np.expand_dims(x_tris_test, axis=0)
    y_tris_test = np.expand_dims(y_tris_test, axis=0)
    z_tris_test = np.expand_dims(z_tris_test, axis=0)
    
    x_test = np.expand_dims(x_test, axis=0)
    y_test = np.expand_dims(y_test, axis=0)
    z_test = np.expand_dims(z_test, axis=0)
    Y_test = np.expand_dims(Y_test, axis=0)
    
#     print('x_tris_test.shape:',x_tris_test.shape)
#     print('y_tris_test.shape:',y_tris_test.shape)
#     print('z_tris_test.shape:',z_tris_test.shape)
    
#     print('x_test.shape:',x_test.shape)
#     print('y_test.shape:',y_test.shape)
#     print('z_test.shape:',z_test.shape)
#     print('Y_test.shape:',Y_test.shape)
    
    x_triswh_test.append(sum(np.multiply(testlight, CMF_1)))
    y_triswh_test.append(sum(np.multiply(testlight, CMF_2)))
    z_triswh_test.append(sum(np.multiply(testlight, CMF_3)))
    
    x_triswh_test = np.array(x_triswh_test)
    y_triswh_test = np.array(y_triswh_test)
    z_triswh_test = np.array(z_triswh_test)
    
    
#     print('x_triswh_test.shape:',x_triswh_test.shape)
#     print('y_triswh_test.shape:',y_triswh_test.shape)
#     print('z_triswh_test.shape:',z_triswh_test.shape)
    
    x_white_test = np.append(x_white_test,np.divide(x_triswh_test, (x_triswh_test + y_triswh_test + z_triswh_test)))
    x_white_test = np.expand_dims(x_white_test, axis=1)
#     print('x_white_test.shape:', x_white_test.shape)
    
    y_white_test = np.append(y_white_test,np.divide(y_triswh_test, (x_triswh_test + y_triswh_test + z_triswh_test)))
    y_white_test = np.expand_dims(y_white_test, axis=1)
#     print('y_white_test.shape:', y_white_test.shape)
       
    
    u_ref = []
    v_ref = []
    u_white_ref = []
    v_white_ref = []
    u_test = []
    v_test = []
    u_white_test = []
    v_white_test = []
    # Getting chromaticity: u and v
    u_ref = np.divide(4 * x_ref, (-2 * x_ref + 12 * y_ref + 3))
    #print('u_ref.shape:', u_ref.shape)
    # print('u_ref', u_ref)
                 
    v_ref = np.divide(6 * y_ref, (-2 * x_ref + 12 * y_ref + 3))           
    #print('v_ref.shape:', v_ref.shape)

    u_white_ref = np.divide(4 * x_white_ref, (-2 * x_white_ref + 12 * y_white_ref + 3))
    #print('u_white_ref.shape:', u_white_ref)
    # print('u_white_ref:', u_white_ref)
    
    v_white_ref = np.divide(6 * y_white_ref, (-2 * x_white_ref + 12 * y_white_ref + 3))
    #print('v_white_ref.shape:', v_white_ref)
    
    u_test = np.divide(4 * x_test, (-2 * x_test + 12 * y_test + 3))
    #print('u_test.shape:', u_test.shape)
    
    v_test = np.divide(6 *y_test, (-2 * x_test + 12 * y_test + 3))
    #print('v_test.shape:', v_test.shape)
    
    u_white_test = np.divide(4 * x_white_test, (-2 * x_white_test + 12 * y_white_test + 3))
    #print('u_white_test:', u_white_test)
    
    v_white_test = np.divide(6 * y_white_test, (-2 * x_white_test + 12 * y_white_test + 3))
    #print('v_white_test:', v_white_test)
    
    
    ck = []
    dk = []
    ck_wh = []
    dk_wh = []
    ck_wh_ref = []
    dk_wh_ref = []
    u_test_adap = []
    v_test_adap = []
 
    # Chromatic Adaptation
    ck = np.divide((4 - u_test - 10 * v_test), v_test)
    #print('ck.shape:', ck.shape)   
    
    dk = np.divide((1.708*v_test + 0.404 - 1.481 * u_test), v_test)
    #print('dk.shape:', dk.shape)
    
    ck_wh = np.divide((4 - u_white_test - 10 * v_white_test),v_white_test)
    #print('ck_wh.shape:', ck_wh.shape)
    
    dk_wh = np.divide((1.708 * v_white_test + 0.404 - 1.481 * u_white_test),v_white_test)
    #print('dk_wh.shape:', dk_wh.shape)
    
    ck_wh_ref = np.divide((4 - u_white_ref - 10 * v_white_ref), v_white_ref)
    #print('ck_wh.shape:', ck_wh.shape)
    
    dk_wh_ref = np.divide((1.708 * v_white_ref + 0.404 - 1.481 * u_white_ref),v_white_ref)
    #print('dk_wh_ref.shape:', dk_wh_ref.shape)
    
    u_test_adap = np.divide((10.872 + 0.404 * ck_wh_ref / ck_wh * ck - 4 * dk_wh_ref / dk_wh * dk),(16.518 + 1.481 * ck_wh_ref / ck_wh * ck - dk_wh_ref / dk_wh * dk))
    #print('u_test_adap.shape:', u_test_adap.shape)
    
    v_test_adap = np.divide(5.52, (16.518 + 1.481 * ck_wh_ref / ck_wh * ck - dk_wh_ref / dk_wh * dk))
    #print('v_test_adap.shape:', v_test_adap.shape)
    
    u_white_test = np.divide((10.872 + 0.404 * ck_wh_ref / ck_wh * ck_wh - 4 * dk_wh_ref / dk_wh * dk_wh), (16.518 + 1.481 * ck_wh_ref / ck_wh * ck_wh - dk_wh_ref / dk_wh * dk_wh) )
    #print('u_white_test.shape', u_white_test.shape)
    
    v_white_test = np.divide(5.52, (16.518 + 1.481 * ck_wh_ref / ck_wh * ck_wh - dk_wh_ref / dk_wh * dk_wh))
    #print('v_white_test.shape', v_white_test.shape)

    # Converting to UVW space
    W = 25 * Y_ref**(1/3) - 17
    U = 13 * np.multiply(W, (u_ref - u_white_ref[0,0]))
    V = 13 * np.multiply(W, (v_ref - v_white_ref[0,0]))
    W_test = 25 * Y_test**(1/3) - 17
    U_test = 13 * np.multiply(W_test, (u_test_adap - u_white_test[0,0]))
    V_test = 13 * np.multiply(W_test, (v_test_adap - v_white_test[0,0]))

    # print('W', W)
    # print('U', U)
    # print('V', V)
    # print('W_test', W_test)
    # print('U_test', U_test)
    # print('V_test', V_test)

    # Calculating Ri
    colourshift = np.sqrt((W - W_test)**2 + (U - U_test)**2 + (V - V_test)**2)
    #print('colorshift:', colourshift)
    #print(colourshift.shape)
    Ri = 100 - 4.6 * colourshift
    R9 = Ri[0,8]

    # Colour Rendering Index, Ra
    CRIscore = np.mean([Ri[0,0:8]])

    return (CRIscore, R9)