import numpy as np
import math

def reflight(CCT):
## CIE 1931 2-degrees Color Matching Function
    CMF = np.array([[380,0.001368,0.000039,0.006450],
            [385,0.002236,0.000064,0.010550],
            [390,0.004243,0.000120,0.020050],
            [395,0.007650,0.000217,0.036210],
            [400,0.014310,0.000396,0.067850],
            [405,0.023190,0.000640,0.110200],
            [410,0.043510,0.001210,0.207400],
            [415,0.077630,0.002180,0.371300],
            [420,0.134380,0.004000,0.645600],
            [425,0.214770,0.007300,1.039050],
            [430,0.283900,0.011600,1.385600],
            [435,0.328500,0.016840,1.622960],
            [440,0.348280,0.023000,1.747060],
            [445,0.348060,0.029800,1.782600],
            [450,0.336200,0.038000,1.772110],
            [455,0.318700,0.048000,1.744100],
            [460,0.290800,0.060000,1.669200],
            [465,0.251100,0.073900,1.528100],
            [470,0.195360,0.090980,1.287640],
            [475,0.142100,0.112600,1.041900],
            [480,0.095640,0.139020,0.812950],
            [485,0.057950,0.169300,0.616200],
            [490,0.032010,0.208020,0.465180],
            [495,0.014700,0.258600,0.353300],
            [500,0.004900,0.323000,0.272000],
            [505,0.002400,0.407300,0.212300],
            [510,0.009300,0.503000,0.158200],
            [515,0.029100,0.608200,0.111700],
            [520,0.063270,0.710000,0.078250],
            [525,0.109600,0.793200,0.057250],
            [530,0.165500,0.862000,0.042160],
            [535,0.225750,0.914850,0.029840],
            [540,0.290400,0.954000,0.020300],
            [545,0.359700,0.980300,0.013400],
            [550,0.433450,0.994950,0.008750],
            [555,0.512050,1.000000,0.005750],
            [560,0.594500,0.995000,0.003900],
            [565,0.678400,0.978600,0.002750],
            [570,0.762100,0.952000,0.002100],
            [575,0.842500,0.915400,0.001800],
            [580,0.916300,0.870000,0.001650],
            [585,0.978600,0.816300,0.001400],
            [590,1.026300,0.757000,0.001100],
            [595,1.056700,0.694900,0.001000],
            [600,1.062200,0.631000,0.000800],
            [605,1.045600,0.566800,0.000600],
            [610,1.002600,0.503000,0.000340],
            [615,0.938400,0.441200,0.000240],
            [620,0.854450,0.381000,0.000190],
            [625,0.751400,0.321000,0.000100],
            [630,0.642400,0.265000,0.000050],
            [635,0.541900,0.217000,0.000030],
            [640,0.447900,0.175000,0.000020],
            [645,0.360800,0.138200,0.000010],
            [650,0.283500,0.107000,0.000000],
            [655,0.218700,0.081600,0.000000],
            [660,0.164900,0.061000,0.000000],
            [665,0.121200,0.044580,0.000000],
            [670,0.087400,0.032000,0.000000],
            [675,0.063600,0.023200,0.000000],
            [680,0.046770,0.017000,0.000000],
            [685,0.032900,0.011920,0.000000],
            [690,0.022700,0.008210,0.000000],
            [695,0.015840,0.005723,0.000000],
            [700,0.011359,0.004102,0.000000],
            [705,0.008111,0.002929,0.000000],
            [710,0.005790,0.002091,0.000000],
            [715,0.004109,0.001484,0.000000],
            [720,0.002899,0.001047,0.000000],
            [725,0.002049,0.000740,0.000000],
            [730,0.001440,0.000520,0.000000],
            [735,0.001000,0.000361,0.000000],
            [740,0.000690,0.000249,0.000000],
            [745,0.000476,0.000172,0.000000],
            [750,0.000332,0.000120,0.000000],
            [755,0.000235,0.000085,0.000000],
            [760,0.000166,0.000060,0.000000],
            [765,0.000117,0.000042,0.000000],
            [770,0.000083,0.000030,0.000000],
            [775,0.000059,0.000021,0.000000],
            [780,0.000042,0.000015,0.000000]])
        
## Daylight Vector for calculating CIE Standard D Illuminants

    D_vec = np.array([[380, 63.4, 38.5, 3],
                [385, 64.6, 36.75, 2.1],
                [390, 65.8, 35, 1.2],
                [395, 80.3, 39.2, 0.05],
                [400, 94.8, 43.4, -1.1],
                [405, 99.8, 44.85, -0.8],
                [410, 104.8,46.3, -0.5],
                [415, 105.35,45.1, -0.6],
                [420, 105.9, 43.9, -0.7],
                [425, 101.35, 40.5, -0.95],
                [430, 96.8, 37.1, -1.2],
                [435, 105.35, 36.9, -1.9], 
                [440, 113.9, 36.7, -2.6],
                [445, 119.75,36.3, -2.75],
                [450, 125.6, 35.9, -2.9],
                [455, 125.55, 34.25, -2.85],
                [460, 125.5, 32.6, -2.8],
                [465, 123.4, 30.25, -2.7],
                [470, 121.3, 27.9, -2.6],
                [475, 121.3,26.1,-2.6],
                [480, 121.3,24.3,-2.6],
                [485, 117.4,22.2,-2.2],
                [490, 113.5,20.1,-1.8],
                [495, 113.3,18.15,-1.65],
                [500, 113.1,16.2,-1.5],
                [505, 111.95,14.7,-1.4],
                [510, 110.8,13.2,-1.3],
                [515, 108.65,10.9,-1.25],
                [520, 106.5,8.6, -1.2],
                [525, 107.65,7.35,-1.1],
                [530, 108.8, 6.1, -1],
                [535, 107.05, 5.15, -0.75],
                [540, 105.3, 4.2, -0.5],
                [545, 104.85, 3.05, -0.4],
                [550, 104.4, 1.9, -0.3],
                [555, 102.2, 0.95, -0.15],
                [560, 100, 0, 0],
                [565, 98, -0.8, 0.1],
                [570, 96, -1.6, 0.2],
                [575, 95.55,-2.55,0.35],
                [580, 95.1,-3.5,0.5],
                [585, 92.1,-3.5,1.3],
                [590, 89.1,-3.5,2.1],
                [595, 89.8,-4.65,2.65],
                [600, 90.5,-5.8,3.2],
                [605, 90.4,-6.5,3.65],
                [610, 90.3,-7.2,4.1],
                [615, 89.35,-7.9,4.4],
                [620, 88.4,-8.6,4.7],
                [625, 86.2,-9.05,4.9],
                [630, 84, -9.5,5.1],
                [635, 84.55,-10.2,5.9],
                [640, 85.1,-10.9,6.7],
                [645, 83.5,-10.8,7],
                [650, 81.9,-10.7,7.3],
                [655, 82.25,-11.35,7.95],
                [660, 82.6,-12, 8.6],
                [665, 83.75,-13, 9.2],
                [670, 84.9,-14, 9.8],
                [675, 83.1,-13.8,10],
                [680, 81.3,-13.6,10.2],
                [685, 76.6,-12.8,9.25],
                [690, 71.9,-12, 8.3],
                [695, 73.1,-12.65,8.95],
                [700, 74.3, -13.3, 9.6],
                [705, 75.35, -13.1, 9.05],
                [710, 76.4, -12.9, 8.5],
                [715, 69.85,-11.75, 7.75],
                [720, 63.3,-10.6, 7],
                [725, 67.5,-11.1,7.3],
                [730, 71.7,-11.6, 7.6],
                [735, 74.35,-11.9, 7.8],
                [740, 77, -12.2, 8],
                [745, 71.1,-11.2,7.35],
                [750, 65.2,-10.2,6.7],
                [755, 56.45,-9, 5.95],
                [760, 47.7,-7.8,5.2],
                [765, 58.15,-9.5,6.3],
                [770, 68.6,-11.2,7.4],
                [775, 66.8,-10.8,7.1],
                [780, 65, -10.4,6.8]])

    S0 = D_vec[:,1]
    S1 = D_vec[:,2]
    S2 = D_vec[:,3]
    
    S0 = np.expand_dims(S0, axis=1)
    S1 = np.expand_dims(S1, axis=1)
    S2 = np.expand_dims(S2, axis=1)
    
#==========================================================================

    lambda_ = CMF[:,0]
    lambda_ = np.expand_dims(lambda_, axis=1)

    PlanckLaw = np.zeros((81,1))
    Daylight = np.zeros((81,1))

    #if CCT<5000K --> use Planckian Radiator as reference
    #if CCT>5000K --> use Daylight
    ref = []
    if (CCT<5000):#if 0<CCT<5000
        for j in range(81):
            PlanckLaw[j,0] = 3.7415e-16/((lambda_[j,0]*1e-9)**5)/(math.exp(0.014388/((lambda_[j,0]*1e-9)*CCT))-1)
            
        k = np.sort(PlanckLaw)
        Planck_norm = np.divide(PlanckLaw,k[-1])
        ref = Planck_norm

    else:
        if (CCT<=7000): #if 5000<CCT<7000 
            xD=-4.6070e9/(CCT**3)+2.9678e6/(CCT**2)+0.09911e3/(CCT)+0.244063;
        else: #if 7000<CCT<25000

            xD=(-2.0064e9/CCT**3)+(1.9018e6/CCT**2)+(0.24748e3/CCT)+0.237040;
        yD=-3.000*(xD**2)+2.870*(xD)-0.275;

        M1=(-1.3515-1.7703*xD+5.9114*yD)/(0.0241+0.2562*xD-0.7341*yD)
        M2=(0.0300-31.4424*xD+30.0717*yD)/(0.0241+0.2562*xD-0.7341*yD)

        for i in range(81):
            Daylight[i,0]=S0[i,0]+M1*S1[i,0]+M2*S2[i,0]
        k=sorted(Daylight)
        ref = np.divide(Daylight, k[-1])
        
    return ref